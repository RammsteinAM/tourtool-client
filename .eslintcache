[{"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\EliminationBracket.tsx":"1","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\Elimination.tsx":"2","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\actions.ts":"3","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\tournamentStyles.ts":"4","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\index.tsx":"5","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\styles\\theme.ts":"6","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\EmailVerificationResult.tsx":"7","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\types.ts":"8","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\passwordResetStyles.ts":"9","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\PlayerFormTextField.tsx":"10","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Home\\homeStyles.ts":"11","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\RegisterSuccess.tsx":"12","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Main.tsx":"13","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\GoogleButton.tsx":"14","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\HeaderHome.tsx":"15","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\importParticipantsDialogStyles.ts":"16","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\arrayUtils.ts":"17","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\reportWebVitals.ts":"18","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\reducer.ts":"19","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\TournamentTypeSelect.tsx":"20","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\types.ts":"21","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\index.tsx":"22","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\RequestPasswordResetSuccess.tsx":"23","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\headerStyles.ts":"24","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\actions.ts":"25","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\DeleteAccountDialog.tsx":"26","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\LanguageSelect\\languageSelectStyles.ts":"27","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Slider\\index.tsx":"28","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\HeaderGeneric.tsx":"29","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\index.tsx":"30","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\layoutStyles.ts":"31","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\reducer.ts":"32","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\authUtils.ts":"33","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\actions.ts":"34","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\helpers.ts":"35","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\NotVerified.tsx":"36","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\actions.ts":"37","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Settings\\Settings.tsx":"38","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\ImportParticipantsDialog.tsx":"39","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\localization.ts":"40","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\PlayerForm.tsx":"41","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\App.tsx":"42","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\FormComponents\\FormSubheader.tsx":"43","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\LanguageSelect\\index.tsx":"44","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\styles\\mainStyles.ts":"45","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\TournamentForm.tsx":"46","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Home\\index.tsx":"47","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\reducer.ts":"48","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\i18n.ts":"49","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\DeleteAccount\\DeleteAccountResult.tsx":"50","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\types.ts":"51","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\types\\error.ts":"52","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\Register.tsx":"53","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\registerStyles.ts":"54","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\LastManStanding.tsx":"55","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\lastManStandingStyles.ts":"56","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListRow.tsx":"57","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\gameListRowStyles.ts":"58","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\PasswordResetForm.tsx":"59","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Login\\loginDialogStyles.ts":"60","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\FacebookLogin\\facebookButtonStyles.ts":"61","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\playerFormTextFieldStyles.ts":"62","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\FacebookLogin\\FacebookButton.tsx":"63","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\GoogleLogo.tsx":"64","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListEnterScoreButton.tsx":"65","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListRound.tsx":"66","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\store.ts":"67","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\asyncWrapper.ts":"68","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\error.ts":"69","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\CreateTournamentDialog.tsx":"70","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\createTournamentDialogStyles.ts":"71","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\Profile.tsx":"72","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\user.ts":"73","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\RequestPasswordReset.tsx":"74","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStatsSettingsListItem.tsx":"75","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\tournamentStatsSettingsListStyles.ts":"76","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStatsSettingsList.tsx":"77","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreContent.tsx":"78","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreSelector.tsx":"79","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreScoresConainer.tsx":"80","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreDialog.tsx":"81","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\reducer.ts":"82","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\reducer.ts":"83","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Routes\\PrivateRoute.tsx":"84","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\PlayerTypeSelect.tsx":"85","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\types.ts":"86","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\actions.ts":"87","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\config.ts":"88","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\profileStyles.ts":"89","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Login\\loginStyles.ts":"90","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreItem.tsx":"91","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\scoreUtils.ts":"92","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Routes\\PublicRoute.tsx":"93","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\types.ts":"94","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\DeleteAccount\\deleteAccountStyles.ts":"95","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigForm.tsx":"96","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\LastManStandingPlayerStatsRow.tsx":"97","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\LastManStandingPlayerStatsList.tsx":"98","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\lastManStandingStyles.ts":"99","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationSidebarItem.tsx":"100","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationCard.tsx":"101","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationBracketCards.tsx":"102","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationCards.tsx":"103","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\types\\main.ts":"104","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\IndependentSnackbar\\index.tsx":"105","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Login\\Login.tsx":"106","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\stringUtils.ts":"107","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\constants.ts":"108","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\googleButtonStyles.ts":"109","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationSidebar.tsx":"110","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigFormItemPlayerSelect.tsx":"111","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigFormItem.tsx":"112","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\DeleteAccountSuccessDialog.tsx":"113","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\player.ts":"114","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\FormComponents\\styles.ts":"115","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationColumn.tsx":"116","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\eliminationSidebarStyles.ts":"117","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\tournament.ts":"118","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Login\\index.tsx":"119","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\dypFormStyles.ts":"120","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\HomeCard.tsx":"121","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\homeCardStyles.ts":"122","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\enterScoresStyles.ts":"123","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Generic\\Dialog.tsx":"124"},{"size":10554,"mtime":1616590944078,"results":"125","hashOfConfig":"126"},{"size":2227,"mtime":1616014734080,"results":"127","hashOfConfig":"126"},{"size":11240,"mtime":1616590377555,"results":"128","hashOfConfig":"126"},{"size":5827,"mtime":1615644096713,"results":"129","hashOfConfig":"126"},{"size":842,"mtime":1613473639642,"results":"130","hashOfConfig":"126"},{"size":572,"mtime":1613378631889,"results":"131","hashOfConfig":"126"},{"size":4684,"mtime":1615821472587,"results":"132","hashOfConfig":"126"},{"size":3281,"mtime":1613938707164,"results":"133","hashOfConfig":"126"},{"size":1563,"mtime":1615545353127,"results":"134","hashOfConfig":"126"},{"size":5706,"mtime":1616143549055,"results":"135","hashOfConfig":"126"},{"size":1488,"mtime":1616482575881,"results":"136","hashOfConfig":"126"},{"size":3300,"mtime":1615821505065,"results":"137","hashOfConfig":"126"},{"size":1103,"mtime":1614785018641,"results":"138","hashOfConfig":"126"},{"size":711,"mtime":1610694471474,"results":"139","hashOfConfig":"126"},{"size":8765,"mtime":1616689514143,"results":"140","hashOfConfig":"126"},{"size":1072,"mtime":1613397758184,"results":"141","hashOfConfig":"126"},{"size":1857,"mtime":1616143449181,"results":"142","hashOfConfig":"126"},{"size":425,"mtime":1609635969166,"results":"143","hashOfConfig":"126"},{"size":827,"mtime":1616654564380,"results":"144","hashOfConfig":"126"},{"size":4143,"mtime":1613409711305,"results":"145","hashOfConfig":"126"},{"size":835,"mtime":1616666826305,"results":"146","hashOfConfig":"126"},{"size":7589,"mtime":1615544787152,"results":"147","hashOfConfig":"126"},{"size":1621,"mtime":1615545648737,"results":"148","hashOfConfig":"126"},{"size":4657,"mtime":1616688634623,"results":"149","hashOfConfig":"126"},{"size":297,"mtime":1613975807360,"results":"150","hashOfConfig":"126"},{"size":2254,"mtime":1615820033861,"results":"151","hashOfConfig":"126"},{"size":322,"mtime":1610633123636,"results":"152","hashOfConfig":"126"},{"size":707,"mtime":1614253851768,"results":"153","hashOfConfig":"126"},{"size":8202,"mtime":1616661490991,"results":"154","hashOfConfig":"126"},{"size":5780,"mtime":1615667105730,"results":"155","hashOfConfig":"126"},{"size":2740,"mtime":1616064865561,"results":"156","hashOfConfig":"126"},{"size":3125,"mtime":1615819967447,"results":"157","hashOfConfig":"126"},{"size":325,"mtime":1613561150261,"results":"158","hashOfConfig":"126"},{"size":7772,"mtime":1616659137590,"results":"159","hashOfConfig":"126"},{"size":1226,"mtime":1612764630390,"results":"160","hashOfConfig":"126"},{"size":3176,"mtime":1615545648737,"results":"161","hashOfConfig":"126"},{"size":3810,"mtime":1615820748060,"results":"162","hashOfConfig":"126"},{"size":231,"mtime":1611642817858,"results":"163","hashOfConfig":"126"},{"size":5525,"mtime":1616680839754,"results":"164","hashOfConfig":"126"},{"size":47290,"mtime":1616680384918,"results":"165","hashOfConfig":"126"},{"size":14774,"mtime":1616151068011,"results":"166","hashOfConfig":"126"},{"size":4707,"mtime":1616603102740,"results":"167","hashOfConfig":"126"},{"size":1766,"mtime":1614339128442,"results":"168","hashOfConfig":"126"},{"size":1729,"mtime":1614358945364,"results":"169","hashOfConfig":"126"},{"size":1770,"mtime":1616569564436,"results":"170","hashOfConfig":"126"},{"size":12136,"mtime":1615552104028,"results":"171","hashOfConfig":"126"},{"size":4621,"mtime":1616677428697,"results":"172","hashOfConfig":"126"},{"size":8156,"mtime":1616583627451,"results":"173","hashOfConfig":"126"},{"size":1169,"mtime":1615396903725,"results":"174","hashOfConfig":"126"},{"size":2183,"mtime":1615820383100,"results":"175","hashOfConfig":"126"},{"size":7534,"mtime":1616499746581,"results":"176","hashOfConfig":"126"},{"size":776,"mtime":1612162500036,"results":"177","hashOfConfig":"126"},{"size":10682,"mtime":1615821202101,"results":"178","hashOfConfig":"126"},{"size":1109,"mtime":1611836196552,"results":"179","hashOfConfig":"126"},{"size":13383,"mtime":1616590918267,"results":"180","hashOfConfig":"126"},{"size":4374,"mtime":1615803138310,"results":"181","hashOfConfig":"126"},{"size":5506,"mtime":1615569708576,"results":"182","hashOfConfig":"126"},{"size":4218,"mtime":1615545269983,"results":"183","hashOfConfig":"126"},{"size":9860,"mtime":1612690736459,"results":"184","hashOfConfig":"126"},{"size":1000,"mtime":1612164946847,"results":"185","hashOfConfig":"126"},{"size":549,"mtime":1611146916965,"results":"186","hashOfConfig":"126"},{"size":1795,"mtime":1613399375323,"results":"187","hashOfConfig":"126"},{"size":689,"mtime":1610694471474,"results":"188","hashOfConfig":"126"},{"size":1386,"mtime":1610694471474,"results":"189","hashOfConfig":"126"},{"size":1192,"mtime":1615545269983,"results":"190","hashOfConfig":"126"},{"size":1148,"mtime":1615545269983,"results":"191","hashOfConfig":"126"},{"size":889,"mtime":1613975694055,"results":"192","hashOfConfig":"126"},{"size":724,"mtime":1616569293141,"results":"193","hashOfConfig":"126"},{"size":243,"mtime":1611751297698,"results":"194","hashOfConfig":"126"},{"size":3252,"mtime":1616065192846,"results":"195","hashOfConfig":"126"},{"size":673,"mtime":1613397734731,"results":"196","hashOfConfig":"126"},{"size":9003,"mtime":1615820162676,"results":"197","hashOfConfig":"126"},{"size":4688,"mtime":1616569061764,"results":"198","hashOfConfig":"126"},{"size":4554,"mtime":1615545353127,"results":"199","hashOfConfig":"126"},{"size":3546,"mtime":1615797700831,"results":"200","hashOfConfig":"126"},{"size":1186,"mtime":1615478626733,"results":"201","hashOfConfig":"126"},{"size":2445,"mtime":1615634233137,"results":"202","hashOfConfig":"126"},{"size":10295,"mtime":1615876898938,"results":"203","hashOfConfig":"126"},{"size":9341,"mtime":1615545269992,"results":"204","hashOfConfig":"126"},{"size":1971,"mtime":1615545270101,"results":"205","hashOfConfig":"126"},{"size":1471,"mtime":1616156736461,"results":"206","hashOfConfig":"126"},{"size":3169,"mtime":1615820772446,"results":"207","hashOfConfig":"126"},{"size":3542,"mtime":1613560426848,"results":"208","hashOfConfig":"126"},{"size":1031,"mtime":1616455914192,"results":"209","hashOfConfig":"126"},{"size":4432,"mtime":1616674103647,"results":"210","hashOfConfig":"126"},{"size":2742,"mtime":1615819330645,"results":"211","hashOfConfig":"126"},{"size":4426,"mtime":1614254263432,"results":"212","hashOfConfig":"126"},{"size":51,"mtime":1610346617372,"results":"213","hashOfConfig":"126"},{"size":1563,"mtime":1613736886053,"results":"214","hashOfConfig":"126"},{"size":851,"mtime":1611836196552,"results":"215","hashOfConfig":"126"},{"size":768,"mtime":1615530699955,"results":"216","hashOfConfig":"126"},{"size":714,"mtime":1615552155718,"results":"217","hashOfConfig":"126"},{"size":722,"mtime":1612260090406,"results":"218","hashOfConfig":"126"},{"size":3249,"mtime":1613551591358,"results":"219","hashOfConfig":"126"},{"size":1109,"mtime":1613723185895,"results":"220","hashOfConfig":"126"},{"size":9409,"mtime":1616143449181,"results":"221","hashOfConfig":"126"},{"size":1825,"mtime":1615798448716,"results":"222","hashOfConfig":"126"},{"size":6971,"mtime":1616151424926,"results":"223","hashOfConfig":"126"},{"size":3082,"mtime":1615803316970,"results":"224","hashOfConfig":"126"},{"size":2848,"mtime":1616366096763,"results":"225","hashOfConfig":"126"},{"size":9827,"mtime":1616155583522,"results":"226","hashOfConfig":"126"},{"size":2486,"mtime":1616070906725,"results":"227","hashOfConfig":"126"},{"size":4661,"mtime":1616155524790,"results":"228","hashOfConfig":"126"},{"size":370,"mtime":1611750698023,"results":"229","hashOfConfig":"126"},{"size":1104,"mtime":1613735950828,"results":"230","hashOfConfig":"126"},{"size":8198,"mtime":1613546219417,"results":"231","hashOfConfig":"126"},{"size":740,"mtime":1616056956571,"results":"232","hashOfConfig":"126"},{"size":152,"mtime":1612352215930,"results":"233","hashOfConfig":"126"},{"size":544,"mtime":1611146916965,"results":"234","hashOfConfig":"126"},{"size":2419,"mtime":1615643538560,"results":"235","hashOfConfig":"126"},{"size":2459,"mtime":1616480691319,"results":"236","hashOfConfig":"126"},{"size":1620,"mtime":1615631132314,"results":"237","hashOfConfig":"126"},{"size":2054,"mtime":1615820064661,"results":"238","hashOfConfig":"126"},{"size":1708,"mtime":1615902324449,"results":"239","hashOfConfig":"126"},{"size":3240,"mtime":1612350812022,"results":"240","hashOfConfig":"126"},{"size":2568,"mtime":1616070201809,"results":"241","hashOfConfig":"126"},{"size":3520,"mtime":1615644508044,"results":"242","hashOfConfig":"126"},{"size":1653,"mtime":1616603987338,"results":"243","hashOfConfig":"126"},{"size":5290,"mtime":1613548907204,"results":"244","hashOfConfig":"126"},{"size":1197,"mtime":1615631132314,"results":"245","hashOfConfig":"126"},{"size":8266,"mtime":1616668766296,"results":"246","hashOfConfig":"126"},{"size":1462,"mtime":1616668636161,"results":"247","hashOfConfig":"126"},{"size":3582,"mtime":1615545269983,"results":"248","hashOfConfig":"126"},{"size":2625,"mtime":1616585059118,"results":"249","hashOfConfig":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x7fxt9",{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"269"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"269"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"265"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"265"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"269"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"284"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"269"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"269"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"259"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"332","messages":"333","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"337"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"341"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"265"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"269"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"265"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"296"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"262"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"265"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"398"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"405"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"269"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"337"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"259"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"420"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"265"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"428","messages":"429","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"430","messages":"431","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"337"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"265"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"442","messages":"443","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"265"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"262"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"420"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"259"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"269"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"481","messages":"482","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"269"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"265"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"262"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"259"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"494","messages":"495","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"502","messages":"503","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"265"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"265"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"259"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"296"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\EliminationBracket.tsx",["541"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\Elimination.tsx",["542"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\actions.ts",["543","544","545"],"import { actionCreator, payloadedActionCreator, PayloadedAction } from \"../helpers\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AxiosError, AxiosResponse } from \"axios\";\r\nimport { userServices } from \"../../services/user\";\r\nimport { tournamentServices } from \"../../services/tournament\";\r\nimport { playerServices } from \"../../services/player\";\r\nimport {\r\n    UPDATE_TOURNAMENT,\r\n    UPDATE_PARTICIPANTS,\r\n    UPDATE_ELIMINATION_PLAYERS,\r\n    UPDATE_LMS_PLAYERS,\r\n    UPDATE_GAMES,\r\n    UPDATE_ELIMINATION_GAMES,\r\n    RESET_GAMES,\r\n    RESET_ELIMINATION_GAMES,\r\n    GET_PLAYERS_REQUEST, GET_PLAYERS_SUCCESS, GET_PLAYERS_FAILURE,\r\n    GET_TOURNAMENTS_REQUEST, GET_TOURNAMENTS_SUCCESS, GET_TOURNAMENTS_FAILURE,\r\n    CREATE_TOURNAMENT_REQUEST, CREATE_TOURNAMENT_SUCCESS, CREATE_TOURNAMENT_FAILURE,\r\n    UPDATE_TOURNAMENT_REQUEST, UPDATE_TOURNAMENT_SUCCESS, UPDATE_TOURNAMENT_FAILURE,\r\n    DELETE_TOURNAMENT_REQUEST, DELETE_TOURNAMENT_SUCCESS, DELETE_TOURNAMENT_FAILURE,\r\n    CREATE_PLAYER_REQUEST, CREATE_PLAYER_SUCCESS, CREATE_PLAYER_FAILURE,\r\n    CREATE_PLAYERS_REQUEST, CREATE_PLAYERS_SUCCESS, CREATE_PLAYERS_FAILURE,\r\n    UPDATE_PLAYERS_REQUEST, UPDATE_PLAYERS_SUCCESS, UPDATE_PLAYERS_FAILURE,\r\n    UpdateTournamentActionParams,\r\n    UpdateParticipantsActionParams,\r\n    UpdateEliminationPlayersActionParams,\r\n    UpdateLMSPlayersActionParams,\r\n    ResetGamesActionParams,\r\n    ResetEliminationGamesActionParams,\r\n    UpdateGamesActionParams,\r\n    UpdateEliminationGamesActionParams,\r\n    GetTournamentsRequestActionParams, GetTournamentsSuccessActionParams, GetTournamentsFailureActionParams,\r\n    GetPlayersRequestActionParams, GetPlayersSuccessActionParams, GetPlayersFailureActionParams,\r\n    CreatePlayerRequestActionParams, CreatePlayerSuccessActionParams, CreatePlayerFailureActionParams,\r\n    CreateTournamentRequestActionParams, CreateTournamentSuccessActionParams, CreateTournamentFailureActionParams,\r\n    UpdateTournamentRequestActionParams, UpdateTournamentSuccessActionParams, UpdateTournamentFailureActionParams,\r\n    DeleteTournamentRequestActionParams, DeleteTournamentSuccessActionParams, DeleteTournamentFailureActionParams,\r\n    CreatePlayersRequestActionParams, CreatePlayersSuccessActionParams, CreatePlayersFailureActionParams,\r\n    UpdatePlayersRequestActionParams, UpdatePlayersSuccessActionParams, UpdatePlayersFailureActionParams,\r\n    UserActionParams,\r\n} from \"./types\"\r\nimport { UserStateData, UserUpdateReqData } from \"../../types/user\";\r\nimport { loginSuccess } from \"../auth/actions\";\r\nimport { ResponseData } from \"../../types/main\";\r\nimport { BaseDatabaseEntity, FetchedPlayer, FetchedTournament, FetchedTournaments, StateParticipants, TournamentCreationReqData, TournamentUpdateReqData } from \"../../types/entities\";\r\n\r\nexport const updateTournament = payloadedActionCreator<UpdateTournamentActionParams>(UPDATE_TOURNAMENT);\r\n\r\nexport const updateEliminationPlayers = payloadedActionCreator<UpdateEliminationPlayersActionParams>(UPDATE_ELIMINATION_PLAYERS);\r\n\r\nexport const updateLMSPlayers = payloadedActionCreator<UpdateLMSPlayersActionParams>(UPDATE_LMS_PLAYERS);\r\n\r\nexport const updateParticipants = payloadedActionCreator<UpdateParticipantsActionParams>(UPDATE_PARTICIPANTS);\r\n\r\nexport const updateGames = payloadedActionCreator<UpdateGamesActionParams>(UPDATE_GAMES);\r\n\r\nexport const updateEliminationGames = payloadedActionCreator<UpdateEliminationGamesActionParams>(UPDATE_ELIMINATION_GAMES);\r\n\r\nexport const resetGames = actionCreator<ResetGamesActionParams>(RESET_GAMES);\r\n\r\nexport const resetEliminationGames = actionCreator<ResetEliminationGamesActionParams>(RESET_ELIMINATION_GAMES);\r\n\r\nexport const getTournamentsRequest = actionCreator<GetTournamentsRequestActionParams>(GET_TOURNAMENTS_REQUEST);\r\nexport const getTournamentsSuccess = payloadedActionCreator<GetTournamentsSuccessActionParams>(GET_TOURNAMENTS_SUCCESS);\r\nexport const getTournamentsFailure = payloadedActionCreator<GetTournamentsFailureActionParams>(GET_TOURNAMENTS_FAILURE);\r\n\r\nexport const getPlayersRequest = actionCreator<GetPlayersRequestActionParams>(GET_PLAYERS_REQUEST);\r\nexport const getPlayersSuccess = payloadedActionCreator<GetPlayersSuccessActionParams>(GET_PLAYERS_SUCCESS);\r\nexport const getPlayersFailure = payloadedActionCreator<GetPlayersFailureActionParams>(GET_PLAYERS_FAILURE);\r\n\r\nexport const createTournamentRequest = actionCreator<CreateTournamentRequestActionParams>(CREATE_TOURNAMENT_REQUEST);\r\nexport const createTournamentSuccess = payloadedActionCreator<CreateTournamentSuccessActionParams>(CREATE_TOURNAMENT_SUCCESS);\r\nexport const createTournamentFailure = payloadedActionCreator<CreateTournamentFailureActionParams>(CREATE_TOURNAMENT_FAILURE);\r\n\r\nexport const updateTournamentRequest = actionCreator<UpdateTournamentRequestActionParams>(UPDATE_TOURNAMENT_REQUEST);\r\nexport const updateTournamentSuccess = payloadedActionCreator<UpdateTournamentSuccessActionParams>(UPDATE_TOURNAMENT_SUCCESS);\r\nexport const updateTournamentFailure = payloadedActionCreator<UpdateTournamentFailureActionParams>(UPDATE_TOURNAMENT_FAILURE);\r\n\r\nexport const deleteTournamentRequest = actionCreator<DeleteTournamentRequestActionParams>(DELETE_TOURNAMENT_REQUEST);\r\nexport const deleteTournamentSuccess = payloadedActionCreator<DeleteTournamentSuccessActionParams>(DELETE_TOURNAMENT_SUCCESS);\r\nexport const deleteTournamentFailure = payloadedActionCreator<DeleteTournamentFailureActionParams>(DELETE_TOURNAMENT_FAILURE);\r\n\r\nexport const createPlayerRequest = actionCreator<CreatePlayerRequestActionParams>(CREATE_PLAYER_REQUEST);\r\nexport const createPlayerSuccess = payloadedActionCreator<CreatePlayerSuccessActionParams>(CREATE_PLAYER_SUCCESS);\r\nexport const createPlayerFailure = payloadedActionCreator<CreatePlayerFailureActionParams>(CREATE_PLAYER_FAILURE);\r\n\r\nexport const createPlayersRequest = actionCreator<CreatePlayersRequestActionParams>(CREATE_PLAYERS_REQUEST);\r\nexport const createPlayersSuccess = payloadedActionCreator<CreatePlayersSuccessActionParams>(CREATE_PLAYERS_SUCCESS);\r\nexport const createPlayersFailure = payloadedActionCreator<CreatePlayersFailureActionParams>(CREATE_PLAYERS_FAILURE);\r\n\r\nexport const updatePlayersRequest = actionCreator<UpdatePlayersRequestActionParams>(UPDATE_PLAYERS_REQUEST);\r\nexport const updatePlayersSuccess = payloadedActionCreator<UpdatePlayersSuccessActionParams>(UPDATE_PLAYERS_SUCCESS);\r\nexport const updatePlayersFailure = payloadedActionCreator<UpdatePlayersFailureActionParams>(UPDATE_PLAYERS_FAILURE);\r\n\r\nconst getTournaments = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(getTournamentsRequest());\r\n\r\n        tournamentServices.getTournaments()\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<FetchedTournaments>>) => {\r\n                    res?.data?.data && dispatch(getTournamentsSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(getTournamentsFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst getPlayers = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(getPlayersRequest());\r\n\r\n        playerServices.getPlayers()\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<StateParticipants>>) => {\r\n                    res?.data?.data && dispatch(getPlayersSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(getPlayersFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst createTournament = (data: TournamentCreationReqData) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(createTournamentRequest());\r\n        tournamentServices.createTournament(data)\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<FetchedTournament>>) => {\r\n                    res?.data?.data && dispatch(createTournamentSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(createTournamentFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst editTournament = (data: TournamentUpdateReqData) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(updateTournamentRequest());\r\n        tournamentServices.updateTournament(data)\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<FetchedTournament>>) => {\r\n                    res?.data?.data && dispatch(updateTournamentSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(updateTournamentFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst deleteTournament = (id: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(deleteTournamentRequest());\r\n        tournamentServices.deleteTournament(id)\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<FetchedTournament>>) => {\r\n                    res?.data?.data && dispatch(deleteTournamentSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(deleteTournamentFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst createPlayer = (name: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(createPlayerRequest());\r\n        playerServices.createPlayer(name)\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<FetchedPlayer>>) => {\r\n                    res?.data?.data && dispatch(createPlayerSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(createPlayerFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst createPlayers = (names: string[]) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(createPlayersRequest());\r\n        playerServices.createPlayers(names)\r\n            .then(\r\n                (res: AxiosResponse) => {\r\n                    res?.data?.data && res.data.data?.length > 0 && dispatch(createPlayersSuccess(res.data.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(createPlayersFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nconst update = (data: UserUpdateReqData) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(updatePlayersRequest());\r\n\r\n        userServices.update(data)\r\n            .then(\r\n                (res: AxiosResponse<ResponseData<UserStateData>>) => {\r\n                    dispatch(loginSuccess(res.data));\r\n                    dispatch(updatePlayersSuccess(res.data));\r\n                },\r\n                (error: AxiosError) => {\r\n                    dispatch(updatePlayersFailure({ error: error.name, message: error.message }));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nexport const entityActions = {\r\n    getTournaments,\r\n    getPlayers,\r\n    createTournament,\r\n    editTournament,\r\n    deleteTournament,\r\n    createPlayer,\r\n    createPlayers,\r\n    update\r\n};","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\tournamentStyles.ts",[],["546","547"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\index.tsx",[],["548","549"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\styles\\theme.ts",[],["550","551"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\EmailVerificationResult.tsx",["552","553","554","555","556","557","558","559","560","561"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport registerStyles from './registerStyles';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions'\r\nimport { registerActions } from '../../redux/register/actions'\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport { appName } from '../../utils/constants';\r\nimport mainStyles from '../../styles/mainStyles';\r\n\r\ninterface FormikValues {\r\n    password: string;\r\n    confirmPassword: string;\r\n}\r\n\r\ninterface IError {\r\n    password?: string;\r\n    confirmPassword?: string;\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nconst EmailVerificationResult = (props: Props) => {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const classes = registerStyles();\r\n    const mainClasses = mainStyles();\r\n    const history = useHistory();\r\n    const registerState = useSelector((state: RootState) => state.register);\r\n    const dispatch = useDispatch();\r\n    const { token } = useParams<{ token: string }>();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (registerState.verifyEmail.status === ActionStatus.Initial) {\r\n\r\n            dispatch(registerActions.verifyEmail(token));\r\n        }\r\n    }, [registerState.verifyEmail.status]);\r\n\r\n    const userData = registerState.verifyEmail.data;\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                maxWidth={false}\r\n                fullScreen={fullScreen}\r\n                open\r\n                classes={{\r\n                    paper:\r\n                        classes.paper\r\n                }}\r\n            >\r\n\r\n                <Typography>\r\n                    {t('Email Verification')}\r\n                </Typography>\r\n                {registerState.verifyEmail.status === ActionStatus.Request &&\r\n                    <div className={mainClasses.progress}>\r\n                        <CircularProgress />\r\n                    </div>\r\n                }\r\n                {registerState.verifyEmail.status === ActionStatus.Success && userData?.email &&\r\n                    <>\r\n                        <div>\r\n                            {userData?.displayName ? t('email-verification-success', {\r\n                                displayName: userData.displayName,\r\n                                email: userData?.email\r\n                            }) :\r\n                                t('email-verification-success-only-email', {\r\n                                    email: userData?.email\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            <Button\r\n                                type=\"button\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                onClick={() => { history.push('/login') }}\r\n                            >\r\n                                {t('Login')}\r\n                            </Button>\r\n                        </div>\r\n                    </>\r\n\r\n                }\r\n                {registerState.verifyEmail.status === ActionStatus.Failure &&\r\n                    <>\r\n                        <div className={mainClasses.errorMessage}>{t(`ERROR_${registerState.verifyEmail.error}`)}</div>\r\n                        <div>\r\n                            <Button\r\n                                type=\"button\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                onClick={() => { history.push('/login') }}\r\n                            >\r\n                                {t('Go to Login Page')}\r\n                            </Button>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </Dialog>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default EmailVerificationResult;",["562","563"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\types.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\passwordResetStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\PlayerFormTextField.tsx",["564","565","566","567","568","569","570","571","572"],"import React, { useState, useEffect } from 'react'\r\nimport clsx from 'clsx';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { FetchedPlayers, PlayerCategory, StateEliminationPlayer, StateEliminationPlayers, StateParticipant, StateParticipants } from '../../types/entities';\r\nimport CloudDoneIcon from '@material-ui/icons/CloudDone';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport CloudQueueIcon from '@material-ui/icons/CloudQueue';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport { RootState } from '../../redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { ErrorNames } from '../../types/error';\r\nimport { ActionStatus } from '../../types/main';\r\nimport playerFormTextFieldStyles from './playerFormTextFieldStyles';\r\n\r\ninterface Props {\r\n    index: number;\r\n    player: StateParticipant;\r\n    inputRef: React.RefObject<HTMLInputElement>[];\r\n    showCategories: boolean;\r\n    fetchedPlayers: FetchedPlayers;\r\n    onKeyDown: (e: React.KeyboardEvent, index: number, name: string) => void;\r\n    onCategoryChange: (index: number, category: PlayerCategory) => void;\r\n    onBlur: (e: React.FocusEvent<Element>, index: number, name: string) => void;\r\n    onChange: (index: number) => void;\r\n}\r\n\r\nconst PlayerFormTextField = (props: Props) => {\r\n    const [playerName, setPlayerName] = useState<string>(props.player.name as string);\r\n    const addPlayersState = useSelector((state: RootState) => state.entities.addPlayers);\r\n    const classes = playerFormTextFieldStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setPlayerName(props.player.name as string);\r\n    }, [props.player.name])\r\n\r\n    const handleChange = (name: string) => {\r\n        setPlayerName(name);\r\n        props.onChange(props.index);\r\n    };\r\n\r\n    const handleBlur = (e: React.FocusEvent) => {\r\n        props.onBlur(e, props.index, playerName);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.playerFormFieldContainer}>\r\n            <div className={classes.playerFormFieldNumber}>{props.index + 1}</div>\r\n            <TextField\r\n                fullWidth\r\n                size=\"small\"\r\n                value={playerName}\r\n                type=\"text\"\r\n                onChange={\r\n                    (event: React.ChangeEvent<{ value: unknown }>) => handleChange(event.target.value as string)\r\n                }\r\n                onKeyDown={\r\n                    (event: React.KeyboardEvent) => {\r\n                        props.onKeyDown(event, props.index, playerName)\r\n                    }\r\n                }\r\n                onBlur={handleBlur}\r\n                inputRef={props.inputRef[props.index]}\r\n                autoComplete=\"off\"\r\n                className={clsx(classes.textField, classes.playerFormField)}\r\n                InputProps={{\r\n                    endAdornment: (playerName &&\r\n                        <InputAdornment position=\"end\">\r\n                            {props.fetchedPlayers?.filter(p => p.name === playerName).length > 0 ?\r\n                                <Tooltip title={`${t('Player exists in the Database')}`}>\r\n                                    <CloudDoneIcon style={{ color: '#8ebd5e', fontSize: '22px', cursor: 'default' }} />\r\n                                </Tooltip> :\r\n                                (\r\n                                    addPlayersState.status === ActionStatus.Request ?\r\n                                        <CircularProgress size={20} /> :\r\n                                        <Tooltip title={`${t('Player will be added to the Database')}`}>\r\n                                            <CloudQueueIcon style={{ color: '#888888', fontSize: '22px', cursor: 'default' }} />\r\n                                        </Tooltip>\r\n                                )\r\n                            }\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            />\r\n            {props.showCategories &&\r\n                <ul className={classes.playerFormGroupSelect}>\r\n                    <li className={\r\n                        clsx(classes.playerFormGroupSelectItem,\r\n                            { [classes.playerFormGroupSelectItemSeleced]: props.player.category === 'A' }\r\n                        )\r\n                    }\r\n                        onClick={() => props.onCategoryChange(props.index, 'A')}\r\n                    >\r\n                        <a>{t('A')}</a>\r\n                    </li>\r\n                    <li\r\n                        className={\r\n                            clsx(classes.playerFormGroupSelectItem,\r\n                                { [classes.playerFormGroupSelectItemSelecedNeutral]: !props.player.category }\r\n                            )\r\n                        }\r\n                        onClick={() => props.onCategoryChange(props.index, null)}\r\n                    >\r\n                        <a className=\"none\">—</a>\r\n                    </li>\r\n                    <li className={\r\n                        clsx(classes.playerFormGroupSelectItem,\r\n                            { [classes.playerFormGroupSelectItemSeleced]: props.player.category === 'B' }\r\n                        )\r\n                    }\r\n                        onClick={() => props.onCategoryChange(props.index, 'B')}\r\n                    >\r\n                        <a>{t('B')}</a>\r\n                    </li>\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlayerFormTextField\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Home\\homeStyles.ts",["573","574"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\RegisterSuccess.tsx",["575","576","577"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions';\r\nimport registerStyles from './registerStyles';\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport mainStyles from '../../styles/mainStyles';\r\nimport { registerActions } from '../../redux/register/actions';\r\n\r\ninterface FormikValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ninterface IError {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nconst RegisterSuccess = (props: Props) => {\r\n    const classes = registerStyles();\r\n    const mainClasses = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const [timeLeft, setTimeLeft] = useState<number>(60);\r\n    const authState = useSelector((state: RootState) => state.auth);\r\n    const registerState = useSelector((state: RootState) => state.register);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(authState.status === ActionStatus.Request);\r\n    }, [authState.status]);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            if (timeLeft > 0) setTimeLeft(timeLeft - 1);\r\n        }, 1000);\r\n    });\r\n\r\n    const handleFormSubmit = (values: FormikValues): void => {\r\n        dispatch(authActions.login(values));\r\n        setSubmitting(true);\r\n    }\r\n\r\n    const handleResendEmail = (e: React.MouseEvent): void => {\r\n        //e.preventDefault();\r\n        registerState.data && dispatch(registerActions.resendVerificationEmail(registerState.data));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Typography>\r\n                {t(\"Registration success\")}\r\n            </Typography>\r\n            <div>\r\n                {t(\"registration-success-body\")}\r\n                {timeLeft > 0 ?\r\n                    t(\"registration-success-body-end1\", { sec: timeLeft }) :\r\n                    t(\"registration-success-body-end2\")\r\n                }\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    disabled={submitting || timeLeft > 0}\r\n                    className={classes.button}\r\n                    onClick={handleResendEmail}\r\n                >\r\n                    {t('Resend Verification Email')}\r\n                </Button>\r\n            </div>\r\n            {registerState.resendVerificationEmail.status === ActionStatus.Request &&\r\n                <div className={mainClasses.progress}>\r\n                    <CircularProgress />\r\n                </div>\r\n            }\r\n            {registerState.resendVerificationEmail.status === ActionStatus.Failure &&\r\n                <div className={mainClasses.errorMessage}>{t(`ERROR_${registerState.resendVerificationEmail.error}`)}</div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RegisterSuccess;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Main.tsx",[],["578","579"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\GoogleButton.tsx",["580"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button';\r\nimport FacebookIcon from '@material-ui/icons/Facebook'; \r\nimport googleButtonStyles from './googleButtonStyles';\r\nimport GoogleLogo from './GoogleLogo';\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\ninterface Props {\r\n  onClick: Function\r\n}\r\n\r\nconst GoogleButton = (props: Props) => {\r\n  const classes = googleButtonStyles();\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"default\"\r\n      className={classes.button}\r\n      startIcon={<GoogleLogo />}\r\n      onClick={() => props.onClick()}\r\n    >\r\n      {t('Google Login')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default GoogleButton","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\HeaderHome.tsx",["581","582","583"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\importParticipantsDialogStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\arrayUtils.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\reportWebVitals.ts",[],["584","585"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\reducer.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\TournamentTypeSelect.tsx",["586","587","588","589","590","591"],"import React from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EliminationForm from './TournamentForm';\r\nimport clsx from 'clsx';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport Whatshot from '@material-ui/icons/Whatshot';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\nimport CompareArrowsIcon from '@material-ui/icons/CompareArrows';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ReactComponent as RoundRobinIcon } from '../../resources/icons/roundRobin.svg';\r\nimport { ReactComponent as LastManStandingIcon } from '../../resources/icons/lms.svg';\r\nimport { ReactComponent as Elimination } from '../../resources/icons/elimination.svg';\r\n\r\nimport tournamentStyles from './tournamentStyles';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst TournamentTypeSelect = (props: Props) => {\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n\r\n    const handleCardClick = (type: string) => {\r\n        history.push(`/tournament-form/${type}`)\r\n    }\r\n\r\n    const classes = tournamentStyles();\r\n    return (\r\n        <div className={classes.cardListContainer}>\r\n            <Card className={classes.cardRoot}>\r\n                <CardContent\r\n                    className={classes.cardContent}\r\n                    style={{ backgroundColor: '#00b8d4' }}\r\n                    onClick={() => handleCardClick('round-robin')}\r\n                >\r\n                    <RoundRobinIcon className={classes.cardIcon} />\r\n                    <div className={classes.cardTitle}>{t('Round Robin')}</div>\r\n                </CardContent>\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n                    <IconButton aria-label=\"info\">\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => handleCardClick('round-robin')} >\r\n                        <PlayArrowIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n            <Card className={classes.cardRoot}>\r\n                <CardContent\r\n                    className={classes.cardContent}\r\n                    style={{ backgroundColor: '#9c27b0' }}\r\n                    onClick={() => handleCardClick('lms')}\r\n                >\r\n                    <LastManStandingIcon className={classes.cardIcon} />\r\n                    <div className={classes.cardTitle}>{t('Last Man Standing')}</div>\r\n                </CardContent>\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n                    <IconButton aria-label=\"info\">\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => handleCardClick('lms')} >\r\n                        <PlayArrowIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n            <Card className={classes.cardRoot}>\r\n                <CardContent\r\n                    className={classes.cardContent}\r\n                    style={{ backgroundColor: '#8dbb5e' }}\r\n                    onClick={() => handleCardClick('elimination')}\r\n                >\r\n\r\n                    <Elimination className={classes.cardIcon} />\r\n                    <div className={classes.cardTitle}>{t('Elimination')}</div>\r\n                </CardContent>\r\n                <CardActions disableSpacing className={classes.cardActions}>\r\n                    <IconButton aria-label=\"info\">\r\n                        <MoreHorizIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => handleCardClick('elimination')} >\r\n                        <PlayArrowIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TournamentTypeSelect\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\types.ts",["592","593"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\index.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\RequestPasswordResetSuccess.tsx",["594","595","596","597"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions'\r\nimport resetPasswordStyles from './passwordResetStyles';\r\nimport { RootState } from '../../redux/store';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    onSuccessCallback: () => void;\r\n}\r\n\r\nconst RequestPasswordResetSuccess = (props: Props) => {\r\n    const classes = resetPasswordStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(authActions.forgotPasswordStateReset())\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Typography>\r\n                {t(\"Check your Email\")}\r\n            </Typography>\r\n            <div>\r\n                <p>\r\n                    {t(\"password-reset-success-body\")}\r\n                </p>\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    disabled={submitting}\r\n                    className={classes.button}\r\n                    onClick={() => props.onSuccessCallback()}\r\n                >\r\n                    {t('Go to Login Page')}\r\n                </Button>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RequestPasswordResetSuccess;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\headerStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\settings\\actions.ts",["598","599","600"],"import { actionCreator, payloadedActionCreator, PayloadedAction } from \"../helpers\";\r\nimport {\r\n    UPDATE_SETTINGS,\r\n    UpdateSettingsActionParams,\r\n    UserActionParams,\r\n} from \"./types\";\r\n\r\nexport const updateSettings = payloadedActionCreator<UpdateSettingsActionParams>(UPDATE_SETTINGS);\r\n\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\DeleteAccountDialog.tsx",["601","602"],"import React, { ReactElement, useEffect, useState } from 'react'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\nimport profileStyles from './profileStyles';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onConfirm: () => void;\r\n}\r\n\r\nconst DeleteAccountDialog = ({ open, onClose, onConfirm }: Props): ReactElement => {\r\n    const [error, setError] = useState<string>()\r\n    const userState = useSelector((state: RootState) => state.user);\r\n    const classes = profileStyles();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setError(userState.delete.error);\r\n    }, [userState.delete.status]);\r\n\r\n    const handleConfirm = (e: React.FormEvent) => {\r\n        onConfirm();\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} classes={{ paper: classes.dialog }}>\r\n            <div className={classes.dialogHeader}>\r\n                <HighlightOffIcon style={{ fontSize: 100 }} />\r\n            </div>\r\n            <DialogTitle id=\"form-dialog-title\">\r\n                {t('Delete Account')}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {t('delete-account-confirmation-message')}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleConfirm} color=\"default\" size='small' type='submit' className={classes.dialogButton}>\r\n                    {t('Delete Account')}\r\n                </Button>\r\n                <Button onClick={onClose} color=\"primary\" size='small' className={classes.dialogButton}>\r\n                    {t('Cancel')}\r\n                </Button>\r\n            </DialogActions>\r\n            {error && <div color='error'>{error}</div>}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default DeleteAccountDialog\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\LanguageSelect\\languageSelectStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Slider\\index.tsx",["603","604","605","606"],"import React from 'react';\r\nimport { withStyles, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nexport const HeaderSlider = withStyles({\r\n    root: {\r\n      color: '#8ebd5e',\r\n      width: '128px',\r\n      margin: '0 18px',\r\n    },\r\n    thumb: {\r\n      height: 14,\r\n      width: 14,\r\n      marginTop: -6,\r\n      marginLeft: -8,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n      '&:focus, &$active': {\r\n        marginTop: -8,        \r\n      marginLeft: -12,\r\n        height: 20,\r\n        width: 20,\r\n      },\r\n    },\r\n    active: {},\r\n    rail: {\r\n      backgroundColor: '#000',\r\n    },\r\n  })(Slider);","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\HeaderGeneric.tsx",["607","608","609","610"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\Headers\\index.tsx",["611","612"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Layout\\layoutStyles.ts",["613"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\reducer.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\authUtils.ts",["614"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\actions.ts",["615","616"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\helpers.ts",["617"],"import { Action } from \"redux\";\r\nimport { EntityStateData } from \"../types/entities\";\r\n\r\nexport interface PayloadedAction<T, P> extends Action<T> {\r\n    payload: P;\r\n}\r\n\r\nexport const actionCreator = <T extends Action<T[\"type\"]>>(type: T[\"type\"]): () => Action<T[\"type\"]> => {\r\n    return () => ({\r\n        type\r\n    })\r\n}\r\n\r\nexport const payloadedActionCreator = <T extends PayloadedAction<T[\"type\"], T[\"payload\"]>>(type: T[\"type\"]): (payload: T[\"payload\"]) => PayloadedAction<T[\"type\"], T[\"payload\"]> => {\r\n    return (payload: T[\"payload\"]) => ({\r\n        type,\r\n        payload\r\n    })\r\n}\r\n\r\nexport const arrayGroupBy = <T>(objectArray: any[], property: string): T => {\r\n    return objectArray.reduce(function (acc, obj, i) {\r\n      //let key = obj[property]\r\n      if (!acc[i]) {\r\n        acc[i] = {}\r\n      }\r\n      acc[i] = {...obj}\r\n      return acc\r\n    }, {})\r\n  }\r\n\r\n\r\n// export function payloadedActionCreator<TAction extends PayloadedAction<TAction['type'], TAction['payload']>>(\r\n//     type: TAction['type'],\r\n// ): (payload: TAction['payload']) => PayloadedAction<TAction['type'], TAction['payload']> {\r\n//     return (payload: TAction['payload']) => ({\r\n//         payload,\r\n//         type,\r\n//     });\r\n// }",["618","619"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\NotVerified.tsx",["620","621","622"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions';\r\nimport registerStyles from './registerStyles';\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport mainStyles from '../../styles/mainStyles';\r\nimport { registerActions } from '../../redux/register/actions';\r\n\r\ninterface FormikValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nconst NotVerified = (props: Props) => {\r\n    const classes = registerStyles();\r\n    const mainClasses = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const [timeLeft, setTimeLeft] = useState<number>(0);\r\n    const authState = useSelector((state: RootState) => state.auth);\r\n    const registerState = useSelector((state: RootState) => state.register);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(authState.status === ActionStatus.Request);\r\n    }, [authState.status]);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => {\r\n            if (timeLeft > 0) setTimeLeft(timeLeft - 1);\r\n        }, 1000);\r\n    });\r\n\r\n    const handleFormSubmit = (values: FormikValues): void => {\r\n        dispatch(authActions.login(values));\r\n        setSubmitting(true);\r\n    }\r\n\r\n    const handleResendEmail = (e: React.MouseEvent): void => {\r\n        //e.preventDefault();\r\n        if (authState.data?.email && authState.data?.password) {\r\n            dispatch(registerActions.resendVerificationEmail({ email: authState.data?.email, password: authState.data?.password }));\r\n            setTimeLeft(60)\r\n        }            \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Typography>\r\n                {t(\"Your account is not verified\")}\r\n            </Typography>\r\n            <div>\r\n                {t(\"not-verified-body\")}\r\n                {timeLeft > 0 ?\r\n                    t(\"not-verified-body-end1\", { sec: timeLeft }) :\r\n                    t(\"not-verified-body-end2\")\r\n                }\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    disabled={submitting || timeLeft > 0}\r\n                    className={classes.button}\r\n                    onClick={handleResendEmail}\r\n                >\r\n                    {t('Resend Verification Email')}\r\n                </Button>\r\n            </div>\r\n            {registerState.resendVerificationEmail.status === ActionStatus.Request &&\r\n                <div className={mainClasses.progress}>\r\n                    <CircularProgress />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotVerified;",["623","624"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\actions.ts",["625"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Settings\\Settings.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\ImportParticipantsDialog.tsx",["626","627","628","629"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\localization.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\PlayerForm.tsx",["630","631","632","633"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\App.tsx",["634","635","636"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\FormComponents\\FormSubheader.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\LanguageSelect\\index.tsx",["637","638","639","640"],"import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport languageSelectStyles from './languageSelectStyles';\r\nimport i18n, { updateAxiosLocale } from '../../utils/i18n';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport mainStyles from '../../styles/mainStyles';\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport type AppLanguages = 'en' | 'hy' | 'ru';\r\n\r\nexport enum AppLanguageNames {\r\n    English = 'en',\r\n    Armenian = 'hy',\r\n    Russian = 'ru'\r\n}\r\n\r\nconst LanguageSelect = (props: Props) => {\r\n    const mainClasses = mainStyles();\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        //console.log()\r\n        i18n.changeLanguage(event.target.value as string);\r\n        localStorage.setItem('i18nextLng', event.target.value as string);\r\n        updateAxiosLocale();\r\n    };\r\n\r\n    const { t } = useTranslation();\r\n    const currentLanguage: string = i18n.language.substring(0, 2);\r\n    return (\r\n        <div>\r\n            <InputLabel id=\"demo-simple-select-label\">{t('Language')}</InputLabel>\r\n            <Select\r\n                fullWidth\r\n                value={currentLanguage}\r\n                onChange={handleChange}                \r\n                className={mainClasses.select}\r\n            >\r\n                <MenuItem value={'en'}>{t('English')}</MenuItem>\r\n                <MenuItem value={'hy'}>{t('Armenian')}</MenuItem>\r\n                <MenuItem value={'ru'}>{t('Russian')}</MenuItem>\r\n            </Select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LanguageSelect\r\n",["641","642"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\styles\\mainStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\TournamentForm.tsx",["643","644"],"import React from 'react'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { useParams } from 'react-router-dom';\r\nimport { formMinMaxValues } from '../../utils/constants';\r\nimport FormSubheader from '../../components/FormComponents/FormSubheader';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTournament } from '../../redux/tournamentEntities/actions';\r\nimport clsx from 'clsx';\r\nimport tournamentStyles from './tournamentStyles';\r\n\r\ninterface ITournamentForm {\r\n    numberOfTables: number,\r\n    goals: boolean,\r\n    numberOfGoals: number,\r\n    draw: boolean,\r\n    sets: number;\r\n    numberOfLives?: number;\r\n    pointsForWin?: number;\r\n    pointsForDraw?: number;\r\n}\r\n\r\nenum SubheaderStateValues {\r\n    Tables = 'tables',\r\n    Goals = 'goals',\r\n    Points = 'points',\r\n}\r\n\r\ninterface SubheaderState {\r\n    [subheader: string]: boolean | undefined;\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst TournamentForm = (props: Props) => {\r\n    const [formState, setFormState] = React.useState<ITournamentForm>({\r\n        numberOfTables: 1,\r\n        goals: true,\r\n        numberOfGoals: 7,\r\n        draw: false,\r\n        sets: 1,\r\n        numberOfLives: 3,\r\n        pointsForWin: 2,\r\n        pointsForDraw: 1,\r\n    });\r\n    const classes = tournamentStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const { tournamentType } = useParams<{ tournamentType: string }>();\r\n    const { t } = useTranslation();\r\n\r\n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const name = event.target.name as keyof typeof formState;\r\n        setFormState({\r\n            ...formState,\r\n            [name]: event.target.checked,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent): void => {\r\n        e.preventDefault();\r\n        dispatch(updateTournament(formState))\r\n        history.push(`/tournament/player-type-select/${tournamentType}`);\r\n    }\r\n\r\n    const handleFormStateChange = (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\r\n        const name = event.target.name as keyof typeof formState;\r\n        let value = event.target.value;\r\n        if (name === 'goals') {\r\n            value = event.target.value === 'true'\r\n        }\r\n        if (name === 'numberOfTables') {\r\n            if (event.target.value as number < formMinMaxValues.minTables) {\r\n                value = 1;\r\n            }\r\n            if (event.target.value as number > formMinMaxValues.maxTables) {\r\n                value = formMinMaxValues.maxTables;\r\n            }\r\n            value = Math.round(value as number);\r\n        }\r\n        if (name === 'numberOfGoals') {\r\n            if (event.target.value as number < formMinMaxValues.minTables) {\r\n                value = formMinMaxValues.minTables;\r\n            }\r\n            if (event.target.value as number > formMinMaxValues.maxGoals) {\r\n                value = formMinMaxValues.maxGoals;\r\n            }\r\n            value = Math.round(value as number);\r\n        }\r\n        setFormState({\r\n            ...formState,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.paper}>\r\n            <form className={classes.form} onSubmit={handleSubmit} id='tournament-form'>\r\n                {tournamentType === 'lms' &&\r\n                    <>\r\n                        <FormSubheader title={t('Last Man Standing')} text={t('form-subheader-lms-text')} descriptionWidth={454} />\r\n                        <div className={classes.formBlock}>\r\n                            <span className={classes.formLabel}>{t('Number of Lives')}</span>\r\n                            <Select\r\n                                id=\"numberOfLives\"\r\n                                name=\"numberOfLives\"\r\n                                value={formState.numberOfLives}\r\n                                onChange={handleFormStateChange}\r\n                                className={classes.formSelect}\r\n                                MenuProps={{ classes: { paper: classes.menuPaper } }}\r\n                            >\r\n                                {\r\n                                    [...Array(10).keys()].map(key => (\r\n                                        <MenuItem key={key} value={key + 1}>{t('Life', { count: key + 1 })}</MenuItem>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                    </>\r\n                }\r\n                <FormSubheader title={t('Tables')} text={t('form-subheader-tables-text')} descriptionWidth={454} />\r\n                <div className={classes.formBlock}>\r\n                    <span className={classes.formLabel}>{t('Number of Tables')}</span>\r\n                    <FormControlLabel\r\n                        value={formState.numberOfTables}\r\n                        label={t('Table', { count: formState.numberOfTables })}\r\n                        classes={{ label: classes.formTextFieldSuffix }}\r\n                        control={\r\n                            <TextField\r\n                                value={formState.numberOfTables}\r\n                                id=\"numberOfTables\"\r\n                                type=\"number\"\r\n                                inputProps={{ min: `${formMinMaxValues.minTables}`, max: `${formMinMaxValues.maxTables}`, step: \"1\" }}\r\n                                onChange={handleFormStateChange}\r\n                                name=\"numberOfTables\"\r\n                                autoComplete=\"off\"\r\n                                className={classes.formTextField}\r\n                            />\r\n                        }\r\n                    />\r\n                </div>\r\n                <FormSubheader title={t('Goals')} text={t('form-subheader-goals-text')} descriptionWidth={454} />\r\n                <div className={classes.formBlock}>\r\n                    <RadioGroup aria-label=\"goals\" name=\"goals\" value={formState.goals} onChange={handleFormStateChange}>\r\n                        <FormControlLabel value={false} control={<Radio color='primary' />} label={t('Quick Entry')} />\r\n                        <FormControlLabel value={true} control={<Radio color='primary' />} label={t('Goals to Win')} />\r\n                    </RadioGroup>\r\n                    <FormControlLabel\r\n                        disabled={!formState.goals}\r\n                        value={formState.numberOfGoals}\r\n                        label={t('Goal', { count: formState.numberOfGoals })}\r\n                        classes={{ label: classes.formTextFieldSuffix }}\r\n                        control={\r\n                            <TextField\r\n                                id=\"numberOfGoals\"\r\n                                type=\"number\"\r\n                                name=\"numberOfGoals\"\r\n                                onChange={handleFormStateChange}\r\n                                inputProps={{ min: `${formMinMaxValues.minGoals}`, max: `${formMinMaxValues.maxGoals}`, step: \"1\" }}\r\n                                //defaultValue={formState.numberOfGoals}\r\n                                autoComplete=\"off\"\r\n                                //disabled={formState.goals === GoalValues.Quick}\r\n                                className={classes.formTextField}\r\n                            />\r\n                        }\r\n                    />\r\n                </div>\r\n                <div className={classes.formBlock}>\r\n                    <FormControlLabel\r\n                        disabled={tournamentType === 'elimination'}\r\n                        control={\r\n                            <Checkbox\r\n                                checked={formState.draw}\r\n                                onChange={handleCheckboxChange}\r\n                                name=\"draw\"\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label={t('Draw')}\r\n                    />\r\n                </div>\r\n                <FormSubheader title={formState.draw ? t('Sets') : t('Winning Sets')} descriptionWidth={454} />\r\n                        <div className={classes.formBlock}>\r\n                            <span className={classes.formLabel}>{formState.draw ? t('Sets') : t('Winning Sets')}</span>\r\n                            <Select\r\n                                id=\"sets\"\r\n                                name=\"sets\"\r\n                                value={formState.sets}\r\n                                onChange={handleFormStateChange}\r\n                                className={classes.formSelect}\r\n                                MenuProps={{ classes: { paper: classes.menuPaper } }}\r\n                            >\r\n                                {\r\n                                    [...Array(10).keys()].map(key => (\r\n                                        <MenuItem key={key} value={key + 1}>{t('Set', { count: key + 1 })}</MenuItem>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                {(tournamentType === 'lms' || tournamentType === 'round-robin') &&\r\n                    <>\r\n                        <FormSubheader title={t('Points')} /* text={t('form-subheader-points-text')} descriptionWidth={454} */ />\r\n                        <div className={classes.formBlock}>\r\n                            <span className={classes.formLabel}>{t('Points for Win')}</span>\r\n                            <Select\r\n                                id=\"pointsForWin\"\r\n                                name=\"pointsForWin\"\r\n                                value={formState.pointsForWin}\r\n                                onChange={handleFormStateChange}\r\n                                className={classes.formSelect}\r\n                                MenuProps={{ classes: { paper: classes.menuPaper } }}\r\n                            >\r\n                                {\r\n                                    [...Array(100).keys()].map(key => (\r\n                                        <MenuItem key={key} value={key + 1}>{t('Point', { count: key + 1 })}</MenuItem>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                        <div\r\n                            className={clsx(classes.formBlock,\r\n                                { 'disabled': !formState.draw }\r\n                            )}\r\n                        >\r\n                            <span className={classes.formLabel}>{t('Points for Draw')}</span>\r\n                            <Select\r\n                                disabled={!formState.draw}\r\n                                id=\"pointsForDraw\"\r\n                                name=\"pointsForDraw\"\r\n                                value={formState.pointsForDraw}\r\n                                onChange={handleFormStateChange}\r\n                                className={classes.formSelect}\r\n                                MenuProps={{ classes: { paper: classes.menuPaper } }}\r\n                            >\r\n                                {\r\n                                    [...Array(100).keys()].map(key => (\r\n                                        <MenuItem key={key} value={key + 1}>{t('Point', { count: key + 1 })}</MenuItem>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default TournamentForm\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Home\\index.tsx",["645"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\reducer.ts",["646","647","648"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\i18n.ts",["649","650"],"import i18n from \"i18next\";\r\nimport I18nextBrowserLanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport intervalPlural from 'i18next-intervalplural-postprocessor';\r\nimport localizationResources from \"./localization\";\r\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\ni18n\r\n    .use(intervalPlural)\r\n    .use(initReactI18next)\r\n    .use(I18nextBrowserLanguageDetector) // passes i18n down to react-i18next\r\n    .init({\r\n        resources: localizationResources,\r\n        fallbackLng: \"en\",\r\n        detection: {\r\n            order: ['localStorage', 'navigator'],\r\n            lookupLocalStorage: 'i18nextLng',\r\n            caches: ['localStorage'],\r\n            excludeCacheFor: ['cimode'],\r\n        },\r\n        interpolation: {\r\n            escapeValue: false\r\n        }\r\n    });\r\n\r\nexport const getLangQuery = () => i18n.language.substring(0, 2) ? `?lang=${i18n.language.substring(0, 2)}` : '';\r\nexport const getLocale = () => i18n.language.substring(0, 2) || '';\r\n\r\nexport const updateAxiosLocale = () => {\r\n    axios.defaults.params = { lang: getLocale() }\r\n}\r\n\r\nexport default i18n;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\DeleteAccount\\DeleteAccountResult.tsx",["651","652","653"],"import React, { useState, useEffect } from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport deleteAccountStyles from './deleteAccountStyles';\r\nimport mainStyles from '../../styles/mainStyles';\r\nimport { userActions } from '../../redux/user/actions';\r\n\r\nconst DeleteAccountResult = () => {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const classes = deleteAccountStyles();\r\n    const mainClasses = mainStyles();\r\n    const userState = useSelector((state: RootState) => state.user);\r\n    const dispatch = useDispatch();\r\n    const { token } = useParams<{ token: string }>();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        if (userState.delete.status === ActionStatus.Initial) {\r\n            dispatch(userActions.deleteUser(token));\r\n        }\r\n    }, [userState.delete.status]);\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                maxWidth={false}\r\n                fullScreen={fullScreen}\r\n                open\r\n                classes={{\r\n                    paper:\r\n                        classes.paper\r\n                }}\r\n            >\r\n\r\n                {userState.delete.status === ActionStatus.Request &&\r\n                    <div className={mainClasses.progress}>\r\n                        <CircularProgress />\r\n                    </div>\r\n                }\r\n                {userState.delete.status === ActionStatus.Success &&\r\n                    <Typography>\r\n                        {t('delete-account-success-message')}\r\n                    </Typography>\r\n                }\r\n            </Dialog>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DeleteAccountResult;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\tournamentEntities\\types.ts",["654","655"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\types\\error.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\Register.tsx",["656","657"],"import React, { useEffect, useState, useCallback } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { registerActions } from '../../redux/register/actions'\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { appName } from '../../utils/constants';\r\nimport mainStyles from '../../styles/mainStyles';\r\nimport { RegisterFormValues } from '../../types/user';\r\nimport { userServices } from '../../services/user';\r\nimport { ErrorNames } from '../../types/error';\r\nimport { debounce } from 'lodash';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ErrorIcon from '@material-ui/icons/Error';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport registerStyles from './registerStyles';\r\n\r\ninterface IError {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ninterface Props {\r\n    onSuccessCallback: (values: RegisterFormValues) => void;\r\n}\r\n\r\nconst Register = (props: Props) => {\r\n    const classes = registerStyles();\r\n    const mainClasses = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const [emailIsValid, setEmailIsValid] = useState<boolean>(false);\r\n    const [emailInUse, setEmailInUse] = useState<boolean>(false);\r\n    const [emailInUseLoading, setEmailInUseLoading] = useState<boolean>(false);\r\n    const [formValues, setFormValues] = useState<RegisterFormValues>();\r\n    const registerState = useSelector((state: RootState) => state.register);\r\n    //const history = useHistory();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(registerState.status === ActionStatus.Request);\r\n        if (registerState.status === ActionStatus.Success && formValues) {\r\n            props.onSuccessCallback(formValues); // TODO\r\n        }\r\n    }, [registerState.status]);\r\n\r\n    const handleFormSubmit = (values: RegisterFormValues): void => {\r\n        setFormValues(values);\r\n        dispatch(registerActions.register(values));\r\n        setSubmitting(true);\r\n    }\r\n\r\n    const checkEmailInUse = (email: string) => {\r\n        userServices.emailCheck(email)\r\n            .then(() => {\r\n                setEmailInUse(false)\r\n            })\r\n            .catch(() => {\r\n                setEmailInUse(true)\r\n            })\r\n            .finally(() => {\r\n                setEmailInUseLoading(false)\r\n            })\r\n    }\r\n\r\n    const delayedCheckEmailInUse = useCallback(debounce(email => checkEmailInUse(email), 500), [emailInUse]);\r\n\r\n    const handleEmailChange = (formikCallback: (e: React.ChangeEvent<any>) => void, e: React.ChangeEvent<{ value: string }>) => {\r\n        const email = e.target.value;\r\n        if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\r\n            setEmailInUseLoading(true);\r\n            setEmailIsValid(true);\r\n            delayedCheckEmailInUse(email);\r\n        }\r\n        else {\r\n            setEmailIsValid(false)\r\n        }\r\n        formikCallback(e);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Typography>\r\n                {t(\"Register for\", { appName })}\r\n            </Typography>\r\n            <Formik\r\n                initialValues={{ email: '', password: '', confirmPassword: '', displayName: '' }}\r\n                validate={values => {\r\n                    const errors: IError = {};\r\n                    if (!values.email) {\r\n                        errors.email = t('Email is required');\r\n                    } else if (\r\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = t('Invalid Email Address');\r\n                    }\r\n                    if (!values.password) {\r\n                        errors.password = t('Please enter the Password');\r\n                    } else if (\r\n                        !/(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}/.test(values.password)\r\n                    ) {\r\n                        errors.password = t('password-validation-error');\r\n                    } else if (values.password !== values.confirmPassword) {\r\n                        errors.password = t('Passwords do not match');\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={handleFormSubmit}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                }) => (\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            id=\"displayName\"\r\n                            label={t('Display Name')}\r\n                            name=\"displayName\"\r\n                            autoComplete=\"displayName\"\r\n                            autoFocus\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.displayName && touched.displayName &&\r\n                                <ErrorMessage name=\"displayName\" component=\"div\" className={mainClasses.formError} />\r\n                            }\r\n                        </div>\r\n                        <TextField\r\n                            error={!!errors.email && touched.email}\r\n                            size=\"small\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={t('Email')}\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            InputProps={{\r\n                                endAdornment: emailIsValid && (\r\n                                    <InputAdornment position=\"end\">\r\n                                        {emailInUseLoading ? <CircularProgress size={20} /> :\r\n                                            (\r\n                                                emailInUse ?\r\n                                                    <Tooltip title={`${t(`ERROR_${ErrorNames.EmailInUse}`)}`}>\r\n                                                        <ErrorIcon style={{ color: 'red', fontSize: '22px', cursor: 'default' }} />\r\n                                                    </Tooltip> :\r\n                                                    <CheckCircleIcon style={{ color: 'green', fontSize: '22px' }} />\r\n                                            )\r\n                                        }\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                            onChange={(e: React.ChangeEvent<any>) => handleEmailChange(handleChange, e)}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.email && touched.email &&\r\n                                <ErrorMessage name=\"email\" component=\"div\" className={mainClasses.formError} />\r\n                            }\r\n                        </div>\r\n                        <TextField\r\n                            error={!!errors.password && touched.password}\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={t('Password')}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.password && touched.password &&\r\n                                <ErrorMessage name=\"password\" component=\"div\" className={mainClasses.formError} />\r\n                            }\r\n                        </div>\r\n                        <TextField\r\n                            error={!!errors.password && touched.password}\r\n                            required\r\n                            fullWidth\r\n                            name=\"confirmPassword\"\r\n                            label={t('Confirm Password')}\r\n                            type=\"password\"\r\n                            id=\"confirmPassword\"\r\n                            autoComplete=\"current-password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.password && touched.password &&\r\n                                <ErrorMessage name=\"confirmPassword\" component=\"div\" className={mainClasses.formError} />\r\n                            }\r\n                        </div>\r\n                        <br />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            disabled={submitting}\r\n                            className={classes.button}\r\n                        >\r\n                            {t('Register')}\r\n                        </Button>\r\n                        {registerState.status === ActionStatus.Request &&\r\n                            <div className={mainClasses.progress}>\r\n                                <CircularProgress />\r\n                            </div>\r\n                        }\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Register\\registerStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\LastManStanding.tsx",["658","659","660","661"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\lastManStandingStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListRow.tsx",["662","663","664","665","666","667","668","669","670"],"import React, { useState, useRef } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Games, StateScore } from '../../types/entities';\r\nimport { splitGameKey } from '../../utils/stringUtils';\r\nimport { resetGames, updateGames } from '../../redux/tournamentEntities/actions';\r\nimport EnterScoreContent from './EnterScore/EnterScoreContent';\r\nimport gameListRowStyles from './gameListRowStyles';\r\nimport clsx from 'clsx';\r\nimport { getMultipleSetScores } from '../../utils/scoreUtils';\r\nimport GameListEnterScoreButton from './GameListEnterScoreButton';\r\n\r\ninterface Props {\r\n    gameKey: string;\r\n    maxScores?: number;\r\n    tabIndex: number;\r\n}\r\n\r\nconst GameListRow = ({ gameKey, tabIndex, maxScores = 10 }: Props) => {\r\n    const [games, setGames] = useState<Games>({});\r\n    const [scoresOpen, setScoresOpen] = useState<boolean>(false);\r\n    const [stateChanged, setStateChanged] = useState<boolean>(false);\r\n    const [numberOfAdditionalGames, setNumberOfAdditionalGames] = useState<number>(0);\r\n    const entityState = useSelector((state: RootState) => state.entities);\r\n    const gamesState = useSelector((state: RootState) => state.entities.games);\r\n    const settingsState = useSelector((state: RootState) => state.settings);\r\n    const scoresRef = useRef<any>();\r\n    const enterScoreContentRef = useRef<any>(null);\r\n    const scoreToggleButtonRef = useRef<any>(null);\r\n    // const winningSets = entityState.tournament.sets || 1;\r\n    const firstRoundGameNumber = Object.keys(games).filter(gameKey => splitGameKey(gameKey).round === 1).length;\r\n    const dispatch = useDispatch();\r\n    const columns = Math.log(Object.keys(games).length + 1) / Math.log(2);\r\n    const classes = gameListRowStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const toggleScoresOpen = () => {\r\n        if (scoresOpen) {\r\n            setScoresOpen(false);\r\n            enterScoreContentRef.current?.blur();\r\n        }\r\n        else {\r\n            setScoresOpen(true);\r\n            enterScoreContentRef.current?.focus();\r\n        }\r\n        setStateChanged(true);\r\n    }\r\n\r\n    const closeScores = () => {\r\n        setScoresOpen(false);\r\n        const nextPossibleKeyOfTheRound = `${splitGameKey(gameKey).round}-${splitGameKey(gameKey).gameNumber + 1}`;\r\n        const nextRoundFirstKey = `${splitGameKey(gameKey).round + 1}-1`;\r\n        const nextPossibleRoundToggleButton = document.getElementById(`toggle-score-button-${nextPossibleKeyOfTheRound}`);\r\n        const nextRoundToggleButton = document.getElementById(`toggle-score-button-${nextRoundFirstKey}`);\r\n        debugger\r\n        enterScoreContentRef.current?.blur();\r\n        nextPossibleRoundToggleButton ? nextPossibleRoundToggleButton?.focus() : nextRoundToggleButton?.focus();\r\n        setStateChanged(true);\r\n    }\r\n\r\n    const handleAdditionalGameCount = (n: number) => {\r\n        setNumberOfAdditionalGames(n);\r\n    }\r\n\r\n    const handleScoreConfirm = (scores1: StateScore, scores2: StateScore) => {\r\n        const { score1, score2 } = getMultipleSetScores(scores1, scores2, Object.keys(scores1).length)\r\n        const round = splitGameKey(gameKey).round;\r\n\r\n        dispatch(updateGames({ [gameKey]: { ...gamesState[gameKey], score1, score2, scores1: Object.values(scores1), scores2: Object.values(scores2) } }));\r\n        closeScores();\r\n    }\r\n\r\n    const visibleScores = entityState.tournament.numberOfGoals && entityState.tournament.numberOfGoals < maxScores ? entityState.tournament.numberOfGoals + 1 : maxScores;\r\n\r\n    return (\r\n        <div className={classes.gameRowContainer}>\r\n            <div className={classes.gameRow}>\r\n                <div className={classes.gameRowP1}>{gamesState[gameKey]?.player1}</div>\r\n                <button className={classes.scoreContainer} onClick={toggleScoresOpen} type='button' tabIndex={tabIndex} id={`toggle-score-button-${gameKey}`}>\r\n                    <GameListEnterScoreButton\r\n                        scoresOpen={scoresOpen}\r\n                        score1={gamesState[gameKey]?.score1}\r\n                        score2={gamesState[gameKey]?.score2}\r\n                    />\r\n                </button>\r\n                <div className={classes.gameRowP2}>{gamesState[gameKey]?.player2}</div>\r\n            </div>\r\n            <div\r\n                className={classes.gameListRowEnterScoreContainer}\r\n                style={\r\n                    (scoresOpen ?\r\n                        { maxHeight: `${scoresRef.current?.offsetHeight + numberOfAdditionalGames * 40}px` } :\r\n                        (stateChanged ?\r\n                            { maxHeight: `0px` } :\r\n                            { position: 'fixed', maxHeight: `0px` }\r\n                        )\r\n                    )\r\n                }\r\n            >\r\n                <div ref={scoresRef} className={classes.enterScoreContentContainer}>\r\n                    <EnterScoreContent\r\n                        forwardedRef={enterScoreContentRef}\r\n                        onClose={closeScores}\r\n                        onConfirm={handleScoreConfirm}\r\n                        gameKey={gameKey}\r\n                        games={entityState.eliminationGames}\r\n                        visibleScores={visibleScores}\r\n                        getNumberOfAdditionalGames={handleAdditionalGameCount}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameListRow\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\gameListRowStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\PasswordResetForm.tsx",["671"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport resetPasswordStyles from './passwordResetStyles';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions'\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport mainStyles from '../../styles/mainStyles';\r\n\r\ninterface FormikValues {\r\n    password: string;\r\n    confirmPassword: string;\r\n}\r\n\r\ninterface IError {\r\n    password?: string;\r\n    confirmPassword?: string;\r\n}\r\n\r\nconst PasswordResetForm = () => {\r\n    const [success, setSuccess] = useState<boolean>(false);\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const dispatch = useDispatch();\r\n    const authState = useSelector((state: RootState) => state.auth);\r\n    const history = useHistory();\r\n    const classes = resetPasswordStyles();\r\n    const mainClasses = mainStyles();\r\n    const { token } = useParams<{ token: string }>();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(authState.resetPassword.status === ActionStatus.Request);\r\n        if (authState.resetPassword.status === ActionStatus.Success) {\r\n            setSuccess(true);\r\n        }\r\n    }, [authState.resetPassword.status]);\r\n\r\n    const handleFormSubmit = (values: FormikValues): void => {\r\n        dispatch(authActions.resetPassword({ password: values.password, token }));\r\n        setSubmitting(true);\r\n    }\r\n\r\n    const handleLoginPageButton = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            maxWidth={false}\r\n            fullScreen={fullScreen}\r\n            open\r\n            classes={{\r\n                paper:\r\n                    classes.paper\r\n            }}\r\n        >\r\n            <div className={classes.content}>\r\n                <div className={classes.leftPart}>\r\n                    (Lorem Ipsum)\r\n                        </div>\r\n                <div className={classes.mainPart}>\r\n\r\n                    <div className={classes.mainContent}>\r\n                        {!success ?\r\n                            <>\r\n                                <Typography>\r\n                                    {t('Please enter a new Password')}\r\n                                </Typography>\r\n                                <Formik\r\n                                    initialValues={{ password: '', confirmPassword: '' }}\r\n                                    validate={values => {\r\n                                        const errors: IError = {};\r\n                                        if (!values.password) {\r\n                                            errors.password = t('Please enter a Password');\r\n                                        } else if (\r\n                                            !/(?=.*[A-Z])(?=.*[a-z])(?=.*\\d).{8,}/.test(values.password)\r\n                                        ) {\r\n                                            errors.password = t('password-validation-error');\r\n                                        } else if (values.password !== values.confirmPassword) {\r\n                                            errors.confirmPassword = t('Passwords do not match');\r\n                                        }\r\n                                        if (!values.confirmPassword) {\r\n                                            errors.confirmPassword = t('Please confirm the Password');\r\n                                        }\r\n\r\n                                        return errors;\r\n                                    }}\r\n                                    onSubmit={handleFormSubmit}\r\n                                >\r\n                                    {({\r\n                                        values,\r\n                                        errors,\r\n                                        touched,\r\n                                        handleChange,\r\n                                        handleBlur,\r\n                                        handleSubmit\r\n                                    }) => (\r\n                                        <form className={classes.form} onSubmit={handleSubmit}>\r\n                                            <TextField\r\n                                                error={!!errors.password && touched.password}\r\n                                                required\r\n                                                fullWidth\r\n                                                name=\"password\"\r\n                                                label={t('Password')}\r\n                                                type=\"password\"\r\n                                                id=\"password\"\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                className={classes.textField}\r\n                                            />\r\n                                            <div className={mainClasses.formErrorContainer}>\r\n                                                {errors.password && touched.password &&\r\n                                                    <ErrorMessage name=\"password\" component=\"div\" className={mainClasses.formError} />}\r\n                                            </div>\r\n                                            <TextField\r\n                                                error={!!errors.confirmPassword && touched.confirmPassword}\r\n                                                required\r\n                                                fullWidth\r\n                                                name=\"confirmPassword\"\r\n                                                label={t('Confirm Password')}\r\n                                                type=\"password\"\r\n                                                id=\"confirmPassword\"\r\n                                                onChange={handleChange}\r\n                                                onBlur={handleBlur}\r\n                                                className={classes.textField}\r\n                                            />\r\n                                            <div className={mainClasses.formErrorContainer}>\r\n                                                {errors.confirmPassword && touched.confirmPassword &&\r\n                                                    <ErrorMessage name=\"confirmPassword\" component=\"div\" className={mainClasses.formError} />}\r\n                                            </div>\r\n                                            <br />\r\n                                            <Button\r\n                                                type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                                disabled={submitting}\r\n                                                className={classes.button}\r\n                                            >\r\n                                                {t('Confirm')}\r\n                                            </Button>\r\n                                            {authState.resetPassword.status === ActionStatus.Request &&\r\n                                                <div className={mainClasses.progress}>\r\n                                                    <CircularProgress />\r\n                                                </div>\r\n                                            }\r\n                                            {authState.resetPassword.status === ActionStatus.Failure &&\r\n                                                <div className={mainClasses.errorMessage}>\r\n                                                    {t(`ERROR_${authState.resetPassword.error}`)}\r\n                                                </div>\r\n                                            }\r\n                                        </form>\r\n                                    )}\r\n                                </Formik>\r\n                            </> :\r\n                            <>\r\n                                <Typography>\r\n                                    {t(\"Your password was successfully reset\")}\r\n                                </Typography>\r\n                                <div>\r\n                                    <Button\r\n                                        type=\"button\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        disabled={submitting}\r\n                                        className={classes.button}\r\n                                        onClick={handleLoginPageButton}\r\n                                    >\r\n                                        {t('Go to Login Page')}\r\n                                    </Button>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default PasswordResetForm;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Login\\loginDialogStyles.ts",[],["672","673"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\FacebookLogin\\facebookButtonStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\playerFormTextFieldStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\FacebookLogin\\FacebookButton.tsx",[],["674","675"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\GoogleLogo.tsx",["676"],"import React from 'react'\r\nimport SvgIcon from '@material-ui/core/SvgIcon'\r\nimport IconButton from '@material-ui/core/IconButton'\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nconst GoogleLogo = (props: Props) => {\r\n    return (\r\n        <SvgIcon>\r\n            <svg viewBox=\"0 0 256 262\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid\">\r\n                <path d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\" fill=\"#4285F4\" />\r\n                <path d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\" fill=\"#34A853\" />\r\n                <path d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782\" fill=\"#FBBC05\" />\r\n                <path d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\" fill=\"#EB4335\" />\r\n            </svg>\r\n        </SvgIcon>\r\n    )\r\n}\r\n\r\nexport default GoogleLogo\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListEnterScoreButton.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\GameListRound.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\store.ts",["677","678","679","680"],"import { createStore, applyMiddleware, combineReducers, AnyAction, Action, Reducer, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport userReducer from './user/reducer';\r\nimport authReducer from './auth/reducer';\r\nimport registerReducer from './register/reducer';\r\nimport entitiesReducer from './tournamentEntities/reducer';\r\nimport settingsReducer from './settings/reducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    entities: entitiesReducer,\r\n    user: userReducer,\r\n    register: registerReducer,\r\n    settings: settingsReducer,\r\n});\r\n\r\nconst configureStore = () => {\r\n    return createStore(\r\n        rootReducer,\r\n        composeWithDevTools(applyMiddleware(thunk))\r\n    )\r\n};\r\n\r\nexport default configureStore;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\asyncWrapper.ts",["681"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\error.ts",[],["682","683"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\CreateTournamentDialog.tsx",["684"],"import React, { ReactElement, useState } from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport createTournamentDialogStyles from './createTournamentDialogStyles';\r\ninterface Props {\r\n    open: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (e: React.FormEvent, name: string) => void;\r\n}\r\n\r\nconst CreateTournamentDialog = ({ open, onClose, onSubmit }: Props): ReactElement => {\r\n    const [tournamentNameLabel, setTournamentNameLabel] = useState<string>();\r\n    const [tournamentName, setTournamentName] = useState<string>('');\r\n    const classes = createTournamentDialogStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const handleTournamentNameChange = (e: React.ChangeEvent<{ value: string }>) => {\r\n        setTournamentName(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        const name = tournamentName || new Date().toLocaleDateString();\r\n        onSubmit(e, name);\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} classes={{ paper: classes.createTournamentDialog }}>\r\n            <div className={classes.submitDialogHeader}>\r\n                <PlayCircleFilledIcon style={{ fontSize: 100 }} />\r\n            </div>\r\n            <form onSubmit={handleSubmit}>\r\n                <DialogTitle id=\"form-dialog-title\">\r\n                    {t('That is one good-looking Tournament!')}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {t('Do you want to give it a name?')}\r\n                </DialogContent>\r\n                <DialogContent>\r\n                    <TextField\r\n                        autoFocus\r\n                        value={tournamentName}\r\n                        margin=\"dense\"\r\n                        id=\"name\"\r\n                        onChange={handleTournamentNameChange}\r\n                        onFocus={() => { setTournamentNameLabel(t('Tournament Name')) }}\r\n                        onBlur={() => { !tournamentName && setTournamentNameLabel(new Date().toLocaleDateString()) }}\r\n                        label={tournamentNameLabel || t('Tournament Name')}\r\n                        type=\"text\"\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={onClose} color=\"default\" size='small' className={classes.submitDialogButton}>\r\n                        {t('Cancel')}\r\n                    </Button>\r\n                    <Button onClick={onClose} color=\"default\" size='small' type='submit' className={classes.submitDialogButton}>\r\n                        {t('Start Tournament')}\r\n                    </Button>\r\n                </DialogActions>\r\n            </form>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CreateTournamentDialog\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\createTournamentDialogStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\Profile.tsx",["685","686","687"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\user.ts",["688","689"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\PasswordReset\\RequestPasswordReset.tsx",["690","691","692"],"import React, { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress, Link } from '@material-ui/core';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions'\r\nimport resetPasswordStyles from './passwordResetStyles';\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport mainStyles from '../../styles/mainStyles';\r\ninterface IFormikValues {\r\n    email: string;\r\n}\r\n\r\ninterface IError {\r\n    email?: string;\r\n}\r\n\r\ninterface Props {\r\n    onSuccessCallback: () => void;\r\n}\r\n\r\nconst RequestPasswordReset = (props: Props) => {\r\n    const classes = resetPasswordStyles();\r\n    const mainClasses = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const authState = useSelector((state: RootState) => state.auth);\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(authState.forgotPassword.status === ActionStatus.Request);\r\n        if (authState.forgotPassword.status === ActionStatus.Success) {\r\n            props.onSuccessCallback();\r\n        }\r\n    }, [authState.forgotPassword.status]);\r\n\r\n    const handleFormSubmit = (values: IFormikValues): void => {\r\n        setSubmitting(true);\r\n        dispatch(authActions.forgotPassword({ email: values.email }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography >\r\n                {t('Request new password')}\r\n            </Typography>\r\n            <Formik\r\n                initialValues={{ email: '' }}\r\n                validate={values => {\r\n                    const errors: IError = {};\r\n                    if (!values.email) {\r\n                        errors.email = t('Email is required');\r\n                    } else if (\r\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = t('Invalid Email Address');\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={handleFormSubmit}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                }) => (\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={t('Email')}\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        {errors.email && touched.email &&\r\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"form-error\" />}\r\n                        <br />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            disabled={submitting}\r\n                            className={classes.button}\r\n                        >\r\n                            {t('Confirm')}\r\n                        </Button>\r\n                        {authState.forgotPassword.status === ActionStatus.Request &&\r\n                            <div className={mainClasses.progress}>\r\n                                <CircularProgress />\r\n                            </div>\r\n                        }\r\n                        {/* {authState.forgotPassword.status === ActionStatus.Failure &&\r\n                            <div className={mainClasses.errorMessage}>\r\n                                {t(`ERROR_${authState.forgotPassword.error}`)}\r\n                            </div>\r\n                        } */}\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RequestPasswordReset;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStatsSettingsListItem.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\tournamentStatsSettingsListStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStatsSettingsList.tsx",["693","694"],"import React from 'react'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport TournamentStatsSettingsListItem from './TournamentStatsSettingsListItem';\r\nimport { LMSColOrderKeys } from '../../types/entities';\r\nimport tournamentStatsSettingsListStyles from './tournamentStatsSettingsListStyles';\r\n\r\nconst reorder = (list: LMSColOrderKeys[], startIndex: number, endIndex: number) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n    return result;\r\n};\r\n\r\ninterface Props {\r\n    orderedColumns: LMSColOrderKeys[],\r\n    enabledColumns: LMSColOrderKeys[],\r\n    onChange: (players: LMSColOrderKeys[]) => void\r\n}\r\n\r\nconst TournamentStatsSettingsList = (props: Props) => {\r\n    const classes = tournamentStatsSettingsListStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const onDragEnd = (result: any) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n\r\n        const items = reorder(\r\n            props.orderedColumns,\r\n            result.source.index,\r\n            result.destination.index\r\n        );\r\n\r\n        props.onChange(items);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.eliminationSidebar}>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            style={{ cursor: 'move' }}\r\n                        >\r\n                            {props.orderedColumns && props.orderedColumns.map((columnName, i) => (\r\n                                <TournamentStatsSettingsListItem\r\n                                    key={i}\r\n                                    keyName={columnName}\r\n                                    index={i}\r\n                                    enabled={props.enabledColumns.indexOf(columnName) >= 0}\r\n                                />\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TournamentStatsSettingsList\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreContent.tsx",["695","696","697","698"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreSelector.tsx",["699","700"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Nullable } from '../../../types/main';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/store';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EnterScoreItem from './EnterScoreItem';\r\nimport enterScoresStyles from './enterScoresStyles';\r\n\r\ninterface PreviousHookValue {\r\n    selection: number;\r\n    //scoreShift: number;\r\n    lastVisibleScore: number;\r\n}\r\n\r\nfunction usePrevious(value: any) {\r\n    const ref = useRef<PreviousHookValue>();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}\r\n\r\ninterface Props {\r\n    selectedNumber?: Nullable<number>;\r\n    onScoreSelect: (score: number) => void;\r\n    disabledScore?: number;\r\n    visibleScores?: number;\r\n    mirrored?: boolean;\r\n}\r\n\r\nconst EnterScoreSelector = ({ selectedNumber, onScoreSelect, disabledScore, mirrored, visibleScores = 9 }: Props) => {\r\n    const [scoreShift, setScoreShift] = useState<number>(0);\r\n    const [initiallyLastVisibleScore, setInitiallyLastVisibleScore] = useState<number>(visibleScores);\r\n    const [isInitial, setIsInitial] = useState<boolean>(true);\r\n    const [plusMinusAction, setPlusMinusAction] = useState<'plus' | 'minus' | null>();\r\n    const entityState = useSelector((state: RootState) => state.entities);\r\n    const classes = enterScoresStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const shiftStep = Math.floor(visibleScores / 2);\r\n    const numberOfGoals = entityState.tournament.numberOfGoals || 7;\r\n    const lastVisibleScore = initiallyLastVisibleScore + scoreShift;\r\n    const hiddenStartingScores = lastVisibleScore - visibleScores + 1;\r\n    const numberOfRenderedScores = lastVisibleScore + shiftStep + 1;\r\n\r\n    const prevState = usePrevious({ selection: selectedNumber, lastVisibleScore })\r\n\r\n    useEffect(() => {\r\n\r\n        if (typeof selectedNumber !== 'number') {\r\n            if (numberOfGoals < visibleScores) { // normally shouldn't be a case\r\n                setInitiallyLastVisibleScore(visibleScores - 1);\r\n                return;\r\n            }\r\n            setInitiallyLastVisibleScore(numberOfGoals);\r\n            return;\r\n        }\r\n        if (lastVisibleScore - selectedNumber >= visibleScores || lastVisibleScore - selectedNumber < 0){\r\n            setScoreShift(0);\r\n        }\r\n        if (lastVisibleScore - selectedNumber < visibleScores && lastVisibleScore - selectedNumber >= 0) {\r\n            return;\r\n        }\r\n        if (selectedNumber < numberOfGoals && selectedNumber > numberOfGoals - visibleScores) {\r\n            setInitiallyLastVisibleScore(numberOfGoals);\r\n            return;\r\n        }\r\n        if (selectedNumber <= Math.floor(visibleScores / 2)) {\r\n            setInitiallyLastVisibleScore(visibleScores - 1);\r\n            return;\r\n        }\r\n        if (selectedNumber <= numberOfGoals - visibleScores) {\r\n            setInitiallyLastVisibleScore(selectedNumber + Math.floor(visibleScores / 2));\r\n            return;\r\n        }\r\n        setInitiallyLastVisibleScore(selectedNumber);\r\n\r\n    }, [selectedNumber])\r\n\r\n    const handleScoreSelect = (score: number) => {\r\n        setPlusMinusAction(null);\r\n        onScoreSelect(score);\r\n        isInitial && setIsInitial(false);\r\n    }\r\n\r\n    const handlePlusButton = () => {\r\n        setPlusMinusAction('plus');\r\n        setScoreShift(scoreShift + shiftStep);\r\n        isInitial && setIsInitial(false);\r\n    }\r\n\r\n    const handleMinusButton = () => {\r\n        setPlusMinusAction('minus');\r\n        hiddenStartingScores <= shiftStep ? setScoreShift(scoreShift - hiddenStartingScores) : setScoreShift(scoreShift - shiftStep);\r\n        isInitial && setIsInitial(false);\r\n    }\r\n\r\n    const getScoreTransactionDelay = (key: number): number => {\r\n        let delay = 0;\r\n        switch (plusMinusAction) {\r\n            case 'plus':\r\n                if (key !== undefined) {\r\n                    delay = (key - hiddenStartingScores) * 30;\r\n                }\r\n                break;\r\n            case 'minus':\r\n                if (key !== undefined) {\r\n                    delay = (hiddenStartingScores + visibleScores - 1 - key) * 30;\r\n                }\r\n                break;\r\n        }\r\n        return delay;\r\n    }\r\n\r\n    const getCircleTransactionDelay = (): number => {\r\n        let delay = 0;\r\n        switch (plusMinusAction) {\r\n            case 'plus':\r\n                if (selectedNumber !== undefined && selectedNumber !== null) {\r\n                    delay = (selectedNumber - hiddenStartingScores) * 30;\r\n                }\r\n                break;\r\n            case 'minus':\r\n                if (selectedNumber !== undefined && selectedNumber !== null) {\r\n                    delay = (hiddenStartingScores + visibleScores - 1 - selectedNumber) * 30;\r\n                }\r\n                break;\r\n        }\r\n        if (prevState !== undefined && (prevState.selection < lastVisibleScore - visibleScores || prevState.selection > lastVisibleScore)) {\r\n            delay = 0;\r\n        }\r\n        return delay;\r\n    }\r\n\r\n    const getCircleTransactionDuration = (): string | undefined => {\r\n        if (prevState !== undefined && (prevState.selection < lastVisibleScore - visibleScores - shiftStep || prevState.selection > lastVisibleScore + shiftStep)) {\r\n            return '0.1s';\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    const scoresArr = [...Array(numberOfRenderedScores).keys()];\r\n    const selectedNumberCircleStyle: React.CSSProperties = { transitionDuration: getCircleTransactionDuration(), transitionDelay: `${getCircleTransactionDelay()}ms` }\r\n    if (mirrored) {\r\n        scoresArr.reverse();\r\n        if (typeof selectedNumber === 'number') {\r\n            selectedNumberCircleStyle.right = `${(selectedNumber - hiddenStartingScores) * 34 + 2}px`;\r\n        }\r\n    }\r\n    else {\r\n        if (typeof selectedNumber === 'number') {\r\n            selectedNumberCircleStyle.left = `${(selectedNumber - hiddenStartingScores) * 34 + 2}px`;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.pointsInputContainer}>\r\n                {!mirrored ?\r\n                    <div style={hiddenStartingScores <= 0 ? { visibility: 'hidden' } : {}}>\r\n                        <IconButton aria-label=\"close\" onClick={handleMinusButton} className={classes.iconButtons}>\r\n                            <RemoveIcon fontSize='small' />\r\n                        </IconButton>\r\n                    </div> :\r\n                    <div>\r\n                        <IconButton aria-label=\"close\" onClick={handlePlusButton} className={classes.iconButtons}>\r\n                            <AddIcon fontSize='small' />\r\n                        </IconButton>\r\n                    </div>\r\n                }\r\n                <div className={classes.pointsInput} style={{ width: `${visibleScores * 34}px` }}>\r\n                    {\r\n                        scoresArr.map(key => {\r\n                            const shift = key - hiddenStartingScores;\r\n                            const shiftPx = shift * 34 - 4;\r\n                            const style: React.CSSProperties = {};\r\n                            if (isInitial) {\r\n                                style.transitionDuration = '0s';\r\n                            }\r\n                            else {\r\n                                style.transitionDelay = `${getScoreTransactionDelay(key)}ms`\r\n                            }\r\n                            if (!mirrored) {\r\n                                style.left = `${shiftPx}px`;\r\n                            }\r\n                            else {\r\n                                style.right = `${shiftPx}px`;\r\n                            }\r\n\r\n                            return (\r\n                                <EnterScoreItem\r\n                                    key={key}\r\n                                    scoreNumber={key}\r\n                                    onSelect={handleScoreSelect}\r\n                                    style={style}\r\n                                    disabled={disabledScore === key}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                    {selectedNumber !== null && selectedNumber !== undefined &&\r\n                        <div className={classes.scoreItemSelected} style={selectedNumberCircleStyle} ></div>\r\n                    }\r\n                </div>\r\n                {!mirrored ?\r\n                    <div>\r\n                        <IconButton aria-label=\"close\" onClick={handlePlusButton} className={classes.iconButtons}>\r\n                            <AddIcon fontSize='small' />\r\n                        </IconButton>\r\n                    </div> :\r\n                    <div style={hiddenStartingScores <= 0 ? { visibility: 'hidden' } : {}}>\r\n                        <IconButton aria-label=\"close\" onClick={handleMinusButton} className={classes.iconButtons}>\r\n                            <RemoveIcon fontSize='small' />\r\n                        </IconButton>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EnterScoreSelector\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreScoresConainer.tsx",["701"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreDialog.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\reducer.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\reducer.ts",["702"],"import { ActionStatus } from \"../../types/main\";\r\nimport AppState from \"../../types/redux\";\r\nimport { clearCookieAndStorage } from \"../../utils/authUtils\";\r\nimport { AuthActionParams, AuthReducerState } from \"./types\";\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  USER_UPDATE_SUCCESS,\r\n  FORGOT_PASSWORD_REQUEST,\r\n  FORGOT_PASSWORD_SUCCESS,\r\n  FORGOT_PASSWORD_FAILURE,\r\n  FORGOT_PASSWORD_RESET,\r\n  RESET_PASSWORD_REQUEST,\r\n  RESET_PASSWORD_SUCCESS,\r\n  RESET_PASSWORD_FAILURE,\r\n  LOGOUT,\r\n} from \"./types\";\r\n\r\nconst forgotPasswordInitialState = {\r\n  status: ActionStatus.Initial,\r\n  error: ''\r\n}\r\n\r\nconst resetPasswordInitialState = {\r\n  status: ActionStatus.Initial,\r\n  error: ''\r\n}\r\n\r\nconst loginCheckInitialState = {\r\n  status: ActionStatus.Initial,\r\n  error: ''\r\n}\r\n\r\nconst initialState: AuthReducerState | null = {\r\n  status: ActionStatus.Initial,\r\n  data: {\r\n    id: null,\r\n    email: '',\r\n    displayName: '',\r\n    password: '',\r\n    social: null,\r\n  },\r\n  error: '',\r\n  forgotPassword: { ...forgotPasswordInitialState },\r\n  resetPassword: { ...resetPasswordInitialState },\r\n  loginCheck: { ...loginCheckInitialState },\r\n};\r\n\r\nconst reducer = (state: AuthReducerState = initialState, action: AuthActionParams): AuthReducerState => {\r\n  switch (action.type) {\r\n    case LOGIN_REQUEST: {\r\n      return {\r\n        ...state,\r\n        data: { ...initialState.data!, ...action.payload?.data },\r\n        status: ActionStatus.Request,\r\n      };\r\n    }\r\n    case LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n        status: ActionStatus.Success,\r\n        error: ''\r\n      };\r\n    }\r\n    case LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        status: ActionStatus.Failure,\r\n        ...action.payload\r\n      };\r\n    }\r\n    case FORGOT_PASSWORD_REQUEST: {\r\n      return {\r\n        ...state,\r\n        forgotPassword: {\r\n          status: ActionStatus.Request,\r\n          error: ''\r\n        }\r\n      };\r\n    }\r\n    case FORGOT_PASSWORD_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        forgotPassword: {\r\n          status: ActionStatus.Success,\r\n          error: ''\r\n        }\r\n      };\r\n    }\r\n    case FORGOT_PASSWORD_FAILURE: {\r\n      return {\r\n        ...state,\r\n        forgotPassword: {\r\n          status: ActionStatus.Failure,\r\n          error: action.payload?.error\r\n        }\r\n      };\r\n    }\r\n    case FORGOT_PASSWORD_RESET: {\r\n      return {\r\n        ...state,\r\n        forgotPassword: {\r\n          status: ActionStatus.Initial,\r\n          error: ''\r\n        }\r\n      };\r\n    }\r\n    case RESET_PASSWORD_REQUEST: {\r\n      return {\r\n        ...state,\r\n        resetPassword: {\r\n          status: ActionStatus.Request,\r\n          error: ''\r\n        }\r\n      };\r\n    }\r\n    case RESET_PASSWORD_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        resetPassword: {\r\n          status: ActionStatus.Success,\r\n          error: ''\r\n        }\r\n      };\r\n    }\r\n    case RESET_PASSWORD_FAILURE: {\r\n      return {\r\n        ...state,\r\n        resetPassword: {\r\n          status: ActionStatus.Failure,\r\n          error: action.payload?.error\r\n        }\r\n      };\r\n    }\r\n    case USER_UPDATE_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        data: { ...action.payload?.data!, social: state.data?.social },\r\n        //status: ActionStatus.Success,\r\n        //error: ''\r\n      };\r\n    }\r\n    case LOGOUT: {\r\n      clearCookieAndStorage();\r\n      return {\r\n        ...initialState\r\n      };\r\n    }\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default reducer;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Routes\\PrivateRoute.tsx",["703","704","705"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Tournaments\\PlayerTypeSelect.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\register\\types.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\user\\actions.ts",["706","707","708","709","710","711"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\config.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\profileStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Login\\loginStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\EnterScoreItem.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\scoreUtils.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Routes\\PublicRoute.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\redux\\auth\\types.ts",["712"],"import { Action } from \"redux\";\r\nimport { ActionStatus, ResponseData, ResponseError } from \"../../types/main\";\r\nimport AppState, { DatalessState } from \"../../types/redux\";\r\nimport { UserLoginReqData, UserStateData } from \"../../types/user\";\r\nimport { PayloadedAction } from \"../helpers\";\r\n\r\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nconst LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\nconst FORGOT_PASSWORD_REQUEST = \"FORGOT_PASSWORD_REQUEST\";\r\nconst FORGOT_PASSWORD_SUCCESS = \"FORGOT_PASSWORD_SUCCESS\";\r\nconst FORGOT_PASSWORD_FAILURE = \"FORGOT_PASSWORD_FAILURE\";\r\nconst FORGOT_PASSWORD_RESET = \"FORGOT_PASSWORD_RESET\";\r\nconst RESET_PASSWORD_REQUEST = \"RESET_PASSWORD_REQUEST\";\r\nconst RESET_PASSWORD_SUCCESS = \"RESET_PASSWORD_SUCCESS\";\r\nconst RESET_PASSWORD_FAILURE = \"RESET_PASSWORD_FAILURE\";\r\nconst USER_UPDATE_SUCCESS = \"USER_UPDATE_SUCCESS\";\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\nexport {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILURE,\r\n    FORGOT_PASSWORD_REQUEST,\r\n    FORGOT_PASSWORD_SUCCESS,\r\n    FORGOT_PASSWORD_FAILURE,\r\n    FORGOT_PASSWORD_RESET,\r\n    RESET_PASSWORD_REQUEST,\r\n    RESET_PASSWORD_SUCCESS,\r\n    RESET_PASSWORD_FAILURE,\r\n    USER_UPDATE_SUCCESS,\r\n    LOGOUT,\r\n}\r\n\r\nexport interface ForgotPasswordReqData {\r\n    email: string;\r\n}\r\n\r\nexport interface AuthReducerAdditionalData {\r\n    forgotPassword: DatalessState;\r\n    resetPassword: DatalessState;\r\n    loginCheck: DatalessState;\r\n}\r\n\r\nexport type AuthReducerState = AppState<UserStateData> & AuthReducerAdditionalData;\r\n\r\nexport type LoginRequestActionParams = PayloadedAction<typeof LOGIN_REQUEST, {data: UserLoginReqData} | null>;\r\nexport type LoginSuccessActionParams = PayloadedAction<typeof LOGIN_SUCCESS, ResponseData<UserStateData> | null>;\r\nexport type LoginFailureActionParams = PayloadedAction<typeof LOGIN_FAILURE, ResponseError | null>;\r\nexport type ForgotPasswordRequestActionParams = Action<typeof FORGOT_PASSWORD_REQUEST>;\r\nexport type ForgotPasswordSuccessActionParams = PayloadedAction<typeof FORGOT_PASSWORD_SUCCESS, AppState<any> | null>;\r\nexport type ForgotPasswordFailureActionParams = PayloadedAction<typeof FORGOT_PASSWORD_FAILURE, ResponseError | null>;\r\nexport type ForgotPasswordResetActionParams = Action<typeof FORGOT_PASSWORD_RESET>;\r\nexport type ResetPasswordRequestActionParams = Action<typeof RESET_PASSWORD_REQUEST>;\r\nexport type ResetPasswordSuccessActionParams = PayloadedAction<typeof RESET_PASSWORD_SUCCESS, AppState<any> | null>;\r\nexport type ResetPasswordFailureActionParams = PayloadedAction<typeof RESET_PASSWORD_FAILURE, ResponseError | null>;\r\nexport type UserUpdateSuccessActionParams = PayloadedAction<typeof USER_UPDATE_SUCCESS, ResponseData<UserStateData> | null>;\r\nexport type LogoutActionParams = Action<typeof LOGOUT>;\r\nexport type AuthActionParams =\r\n    LoginRequestActionParams |\r\n    LoginSuccessActionParams |\r\n    LoginFailureActionParams |\r\n    ForgotPasswordRequestActionParams |\r\n    ForgotPasswordSuccessActionParams |\r\n    ForgotPasswordFailureActionParams |\r\n    ForgotPasswordResetActionParams |\r\n    ResetPasswordRequestActionParams |\r\n    ResetPasswordSuccessActionParams |\r\n    ResetPasswordFailureActionParams | \r\n    UserUpdateSuccessActionParams |\r\n    LogoutActionParams\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\DeleteAccount\\deleteAccountStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigForm.tsx",["713","714"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\LastManStandingPlayerStatsRow.tsx",["715"],"import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { ReactComponent as DeadPlayerSkull } from '../../../resources/icons/lms.svg';\r\nimport KEKW from '../../../resources/icons/KEKW.png';\r\nimport lastManStandingStyles from './lastManStandingStyles';\r\nimport { LMSColOrderKeys, LMSTableProps } from '../../../types/entities';\r\n\r\ninterface Props extends LMSTableProps {\r\n    placement: number;\r\n    colOrderedKeys: LMSColOrderKeys[];\r\n    showName?: boolean;\r\n    showLives?: boolean;\r\n    showPoints?: boolean;\r\n    showNumberOfGames?: boolean;\r\n    easterEgg?: boolean;\r\n}\r\n\r\nconst LastManStandingPlayerStatsRow = (props: Props) => {\r\n    const classes = lastManStandingStyles();\r\n\r\n    return (\r\n        <tr className={classes.lmsStatsTr}>\r\n            <td className={clsx(classes.lmsStatsTd, classes.lmsStatsTdPlacement)}>{props.placement}</td>\r\n            {props.colOrderedKeys.map((key: LMSColOrderKeys) => {\r\n                if (key === 'lives' && props[key] === 0) {\r\n                    return <td className={classes.lmsStatsTd} style={{verticalAlign: 'bottom'}}>\r\n                        {!props.easterEgg ? <DeadPlayerSkull width={21} height={21} /> : <img width={21} height={21} src={KEKW} title='Dead KEKW' />}\r\n                    </td>\r\n                }\r\n                if (key === 'averagePoints') {\r\n                    return <td className={classes.lmsStatsTd}>\r\n                        {props[key]?.toFixed(2)}\r\n                    </td>\r\n                }\r\n                return (props[key] || typeof props[key] === 'number') &&\r\n                    <td className={clsx(classes.lmsStatsTd, { [classes.lmsStatsTdPlayer]: key === 'name' })}>\r\n                        {props[key]}\r\n                    </td>\r\n            })}\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default LastManStandingPlayerStatsRow\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\LastManStandingPlayerStatsList.tsx",["716","717","718","719"],"import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../../redux/store';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport clsx from 'clsx';\r\nimport LastManStandingPlayerStatsRow from './LastManStandingPlayerStatsRow';\r\nimport { Players } from '../../../pages/Tournaments/LastManStanding';\r\nimport toast from '../../IndependentSnackbar';\r\nimport TournamentStatsSettingsList from '../TournamentStatsSettingsList';\r\nimport { updateSettings } from '../../../redux/settings/actions';\r\nimport lastManStandingStyles from './lastManStandingStyles';\r\nimport { LMSColOrderKeys } from '../../../types/entities';\r\nimport { getNormalizedParticipants } from '../../../utils/arrayUtils';\r\n\r\ninterface Props {\r\n    playersData: Players\r\n}\r\n\r\nconst LastManStandingPlayerStatsList = (props: Props) => {\r\n    const [settingsOpen, setSettingsOpen] = useState<boolean>(false);\r\n    const [easterEgg, setEasterEgg] = useState<boolean>(false);\r\n    const entityState = useSelector((state: RootState) => state.entities);\r\n    const games = useSelector((state: RootState) => state.entities.games);\r\n    const lmsPlayers = useSelector((state: RootState) => state.entities.lmsPlayers);\r\n    const settingsState = useSelector((state: RootState) => state.settings);\r\n    const statsColOrder = useSelector((state: RootState) => state.settings.tournamentSidebarColumnOrder) || ['name', 'numberOfGames', 'lives'];\r\n    const statsEnabledColumns = useSelector((state: RootState) => state.settings.tournamentSidebarEnabledColumns) || ['name', 'numberOfGames', 'lives'];\r\n    const dispatch = useDispatch();\r\n    const classes = lastManStandingStyles();\r\n    const { t } = useTranslation();\r\n\r\n    const normalizedParticipants =  getNormalizedParticipants(entityState.participants);\r\n\r\n\r\n    const statNames: { [key in LMSColOrderKeys]: string } = {\r\n        name: t('LMSStatsCol_Player'),\r\n        lives: t('LMSStatsCol_Lives'),\r\n        numberOfGames: t('LMSStatsCol_NumberOfGames'),\r\n        points: t('LMSStatsCol_Points'),\r\n        averagePoints: t('LMSStatsCol_AveragePoints'),\r\n        goals: t('LMSStatsCol_Goals'),\r\n        goalsIn: t('LMSStatsCol_GoalsIn'),\r\n        goalDiff: t('LMSStatsCol_GoalDiff'),\r\n        matchesWon: t('LMSStatsCol_MatchesWon'),\r\n        matchesLost: t('LMSStatsCol_MatchesLost'),\r\n        matchesDraw: t('LMSStatsCol_MatchesDraw'),\r\n    }\r\n\r\n    const handleSettingsButtonClick = (e: React.MouseEvent) => {\r\n        if (e.ctrlKey && e.shiftKey && e.altKey) {\r\n            !easterEgg && toast.success('KEKW mode activated.');\r\n            setEasterEgg(!easterEgg);\r\n            return;\r\n        }\r\n        setSettingsOpen(!settingsOpen);\r\n    }\r\n\r\n    const visibleOrderedColumns: LMSColOrderKeys[] = statsEnabledColumns.sort((a, b) => {\r\n        if (statsColOrder.indexOf(a) > statsColOrder.indexOf(b)) {\r\n            return 1;\r\n        }\r\n        return -1;\r\n    });\r\n\r\n    const renderPlayersWithStats = () => {\r\n\r\n        const playersArr = Object.values(props.playersData).sort((a, b) => {\r\n            if (a.lives < b.lives) {\r\n                return 1\r\n            }\r\n            return -1;\r\n        })\r\n\r\n        return playersArr.map((player, i) => {\r\n            const name = typeof player.id === 'number' ? player.id : `${player.id[0]} / ${player.id[1]}`;\r\n            return (\r\n                <LastManStandingPlayerStatsRow\r\n                    placement={i + 1}\r\n                    name={normalizedParticipants[player.id].name}\r\n                    lives={player.lives}\r\n                    goals={player.goals}\r\n                    goalsIn={player.goalsIn}\r\n                    goalDiff={player.goals - player.goalsIn}\r\n                    numberOfGames={player.numberOfGames}\r\n                    points={player.points}\r\n                    averagePoints={player.numberOfGames > 0 ? player.points / player.numberOfGames : 0}\r\n                    matchesWon={player.matchesWon}\r\n                    matchesLost={player.matchesLost}\r\n                    matchesDraw={player.numberOfGames - player.matchesWon - player.matchesLost}\r\n                    colOrderedKeys={visibleOrderedColumns}\r\n                    easterEgg={easterEgg}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    const handleColumnChange = (columns: LMSColOrderKeys[]) => {\r\n        dispatch(updateSettings({ tournamentSidebarColumnOrder: [...columns] }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.tournamentSidebarHeaderContainer}>\r\n                <div\r\n                    className={clsx(classes.tournamentSidebarHeader, { [classes.tournamentSidebarHeaderClosed]: !settingsOpen })}\r\n                    style={{ maxHeight: settingsOpen ? '416px' : '56px' }}\r\n                >\r\n                    <div className={classes.tournamentSidebarHeaderTitle}>\r\n                        {settingsOpen && <div className={classes.tournamentSidebarHeaderTitleText}>{t('Configure Table')}</div>}\r\n                        <IconButton\r\n                            onClick={handleSettingsButtonClick}\r\n                        >\r\n                            {settingsOpen ?\r\n                                <CloseIcon className={classes.icons} /> :\r\n                                <SettingsIcon className={classes.icons} />\r\n                            }\r\n                        </IconButton>\r\n                    </div>\r\n                    <div style={!settingsOpen ? { visibility: 'hidden' } : {}}>\r\n                        <TournamentStatsSettingsList orderedColumns={statsColOrder} enabledColumns={statsEnabledColumns} onChange={handleColumnChange} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <CardContent className={classes.cardContent}>\r\n                <div className={classes.statnsTableContainer}>\r\n\r\n                    <table className={classes.lmsStatsTable}>\r\n                        <thead className={classes.lmsStatsThead}>\r\n                            <td className={clsx(classes.lmsStatsTd, classes.lmsStatsTdPlacement)}>#</td>\r\n                            {visibleOrderedColumns.map((key: LMSColOrderKeys) => {\r\n                                return <td className={clsx(classes.lmsStatsHeaderTd, { [classes.lmsStatsTdPlayer]: key === 'name' })}>\r\n                                    {statNames[key]}\r\n                                </td>\r\n                            })}\r\n                        </thead>\r\n                        <tbody>\r\n                            {renderPlayersWithStats()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </CardContent>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LastManStandingPlayerStatsList\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\TournamentStats\\lastManStandingStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationSidebarItem.tsx",["720","721","722","723","724","725"],"import React, { useEffect, useState } from 'react'\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { StateEliminationPlayer, StateEliminationPlayers, StateParticipant } from '../../../types/entities';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\r\nimport eliminationSidebarStyles from './eliminationSidebarStyles';\r\nimport { RootState } from '../../../redux/store';\r\nimport { useSelector } from 'react-redux';\r\nimport { getNormalizedParticipants } from '../../../utils/arrayUtils';\r\n\r\ninterface Props {\r\n    player: StateEliminationPlayer,\r\n    index: number;\r\n}\r\n\r\nconst EliminationSidebarItem = (props: Props) => {\r\n    const storeParticipants = useSelector((state: RootState) => state.entities.participants);\r\n    const classes = eliminationSidebarStyles();\r\n    const { t } = useTranslation();\r\n    \r\n    const normalizedParticipants = getNormalizedParticipants(storeParticipants);\r\n    const playerId: string = typeof props.player.id === 'object' ? props.player.id.join('/') : props.player.id?.toString();\r\n    const playerName = typeof props.player.id === 'object' ? `${normalizedParticipants[props.player.id[0]]?.name} / ${normalizedParticipants[props.player.id[1]]?.name} ` : normalizedParticipants[props.player.id]?.name\r\n\r\n    const getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\r\n        background: isDragging ? \"#ffffff44\" : \"initial\",\r\n        boxShadow: isDragging ? \"0px 2px 12px #00000077\" : \"initial\",\r\n        ...draggableStyle,\r\n        cursor: 'move',\r\n        outline: 'none',\r\n    });\r\n\r\n    return (\r\n        <Draggable key={playerId + props.index} draggableId={playerId + props.index} index={props.index}>\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    className={classes.eliminationSidebarItem}\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    style={getItemStyle(\r\n                        snapshot.isDragging,\r\n                        provided.draggableProps.style\r\n                    )}\r\n                >\r\n                    <div className={classes.eliminationSidebarItemNumber}>{props.index + 1}</div>\r\n                    {props.player && props.player.bye ?\r\n                        <div className={classes.eliminationSidebarItemPlayerBye}>{t('<Bye>')}</div> :\r\n                        <div className={classes.eliminationSidebarItemPlayer}>{playerName}</div>\r\n                    }\r\n                    <div className={classes.eliminationSidebarItemIcon}>\r\n                        <DragHandleIcon />\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default EliminationSidebarItem\r\n","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationCard.tsx",["726","727","728","729","730"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationBracketCards.tsx",["731"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationCards.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\types\\main.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\IndependentSnackbar\\index.tsx",["732","733"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\pages\\Login\\Login.tsx",["734","735","736"],"import React, { useEffect, useState, FC } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { CircularProgress, Link } from '@material-ui/core';\r\nimport { ErrorMessage, Formik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { authActions } from '../../redux/auth/actions'\r\nimport loginStyles from './loginStyles';\r\nimport { RootState } from '../../redux/store';\r\nimport { ActionStatus } from '../../types/main';\r\nimport GoogleLogin from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport FacebookButton from '../../components/Buttons/FacebookLogin/FacebookButton';\r\nimport GoogleButton from '../../components/Buttons/GoogleLogin/GoogleButton';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { appName } from '../../utils/constants';\r\nimport mainStyles from '../../styles/mainStyles';\r\nimport toast from '../../components/IndependentSnackbar';\r\n\r\ninterface FormikValues {\r\n    email: string;\r\n    password: string;\r\n}\r\n\r\ninterface IError {\r\n    email?: string;\r\n    password?: string;\r\n}\r\n\r\ninterface Props {\r\n    resetPasswordCallback: () => void\r\n}\r\n\r\nconst Login = (props: Props) => {\r\n    const classes = loginStyles();\r\n    const mainClasses = mainStyles();\r\n    const dispatch = useDispatch();\r\n    const [submitting, setSubmitting] = useState<boolean>(false);\r\n    const authState = useSelector((state: RootState) => state.auth);\r\n    const history = useHistory();\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        setSubmitting(authState.status === ActionStatus.Request);\r\n        if (authState.status === ActionStatus.Failure) {\r\n            //authState.error && toast.error(t(`ERROR_${authState.error}`))\r\n        }\r\n    }, [authState.status]);\r\n\r\n    const handleFormSubmit = (values: FormikValues): void => {\r\n        dispatch(authActions.login(values));\r\n        setSubmitting(true);\r\n    }\r\n\r\n    const handleForgotPassword = (e: React.MouseEvent): void => {\r\n        e.preventDefault();\r\n        props.resetPasswordCallback();\r\n    }\r\n\r\n    const responseGoogle = (response: any) => {\r\n        dispatch(authActions.googleLogin(response.tokenId));\r\n    }\r\n\r\n    const responseGoogleFailure = (response: any) => {\r\n        toast.error(`${t('Google Login Error:')} ${response?.details}`);\r\n    }\r\n\r\n    const responseFacebook = (response: any) => {\r\n        dispatch(authActions.facebookLogin(response));\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography>\r\n                {t(\"Login to app\", { appName })}\r\n            </Typography>\r\n            <Formik\r\n                initialValues={{ email: '', password: '' }}\r\n                validate={values => {\r\n                    const errors: IError = {};\r\n                    if (!values.email) {\r\n                        errors.email = t('Email is required');\r\n                    } else if (\r\n                        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n                    ) {\r\n                        errors.email = t('Invalid Email Address');\r\n                    }\r\n                    if (!values.password) {\r\n                        errors.password = t('Please enter the Password');\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={handleFormSubmit}\r\n            >\r\n                {({\r\n                    values,\r\n                    errors,\r\n                    touched,\r\n                    handleChange,\r\n                    handleBlur,\r\n                    handleSubmit\r\n                }) => (\r\n                    <form className={classes.form} onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            error={!!errors.email && touched.email}\r\n                            size=\"small\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label={t('Email')}\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.email && touched.email &&\r\n                                <ErrorMessage name=\"email\" component=\"div\" className={mainClasses.formError} />}\r\n                        </div>\r\n                        <TextField\r\n                            error={!!errors.password && touched.password}\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label={t('Password')}\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            onChange={handleChange}\r\n                            onBlur={handleBlur}\r\n                            className={classes.textField}\r\n                        />\r\n                        <div className={mainClasses.formErrorContainer}>\r\n                            {errors.password && touched.password &&\r\n                                <ErrorMessage name=\"password\" component=\"div\" className={mainClasses.formError} />}\r\n                        </div>\r\n                        <div className={classes.forgotPasswordLink}>\r\n                            <Link href=\"\" onClick={handleForgotPassword}>\r\n                                {t(\"Forgot Password?\")}\r\n                            </Link>\r\n                        </div>\r\n                        <br />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            disabled={submitting}\r\n                            className={classes.button}\r\n                        >\r\n                            {t('Login')}\r\n                        </Button>\r\n                        <GoogleLogin\r\n                            clientId=\"689539234040-ul5se7j4rnm8s7mkf04bn51suq67p1hg.apps.googleusercontent.com\"\r\n                            onSuccess={responseGoogle}\r\n                            onFailure={responseGoogleFailure}\r\n                            cookiePolicy={'single_host_origin'}\r\n                            render={(renderProps) => (\r\n                                <GoogleButton onClick={renderProps.onClick} />\r\n                            )}\r\n                        />\r\n                        <FacebookLogin\r\n                            appId=\"1360736550926562\"\r\n                            autoLoad={false}\r\n                            fields=\"name,email\"\r\n                            buttonStyle={\r\n                                { width: \"200px\", textTransform: \"none\" }\r\n                            }\r\n                            callback={responseFacebook}\r\n                            render={(renderProps) => (\r\n                                <FacebookButton onClick={renderProps.onClick} />\r\n                            )}\r\n                        />\r\n                        {authState.status === ActionStatus.Request &&\r\n                            <div className={mainClasses.progress}>\r\n                                <CircularProgress />\r\n                            </div>\r\n                        }\r\n                        {/* {authState.status === ActionStatus.Failure &&\r\n                            <div className={mainClasses.errorMessage}>\r\n                                {t(`ERROR_${authState.error}`)}\r\n                            </div>\r\n                        } */}\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\stringUtils.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\utils\\constants.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Buttons\\GoogleLogin\\googleButtonStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationSidebar.tsx",["737"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigFormItemPlayerSelect.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\DYPConfigFormItem.tsx",["738"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Profile\\DeleteAccountSuccessDialog.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\player.ts",["739","740","741","742","743","744","745","746"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\FormComponents\\styles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\EliminationColumn.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\Elimination\\eliminationSidebarStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\services\\tournament.ts",["747","748","749","750","751","752","753","754"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Login\\index.tsx",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\DYPConfigForm\\dypFormStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\HomeCard.tsx",["755","756","757","758","759"],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\homeCardStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Tournament\\EnterScore\\enterScoresStyles.ts",[],"C:\\Users\\Avet\\Sources\\tourtool-client\\src\\components\\Dialogs\\Generic\\Dialog.tsx",["760","761","762","763"],{"ruleId":"764","severity":1,"message":"765","line":38,"column":8,"nodeType":"766","endLine":38,"endColumn":40,"suggestions":"767"},{"ruleId":"764","severity":1,"message":"768","line":20,"column":8,"nodeType":"766","endLine":20,"endColumn":10,"suggestions":"769"},{"ruleId":"770","severity":1,"message":"771","line":1,"column":49,"nodeType":"772","messageId":"773","endLine":1,"endColumn":64},{"ruleId":"770","severity":1,"message":"774","line":40,"column":5,"nodeType":"772","messageId":"773","endLine":40,"endColumn":21},{"ruleId":"770","severity":1,"message":"775","line":45,"column":10,"nodeType":"772","messageId":"773","endLine":45,"endColumn":28},{"ruleId":"776","replacedBy":"777"},{"ruleId":"778","replacedBy":"779"},{"ruleId":"776","replacedBy":"780"},{"ruleId":"778","replacedBy":"781"},{"ruleId":"776","replacedBy":"782"},{"ruleId":"778","replacedBy":"783"},{"ruleId":"770","severity":1,"message":"784","line":1,"column":17,"nodeType":"772","messageId":"773","endLine":1,"endColumn":25},{"ruleId":"770","severity":1,"message":"785","line":9,"column":8,"nodeType":"772","messageId":"773","endLine":9,"endColumn":19},{"ruleId":"770","severity":1,"message":"786","line":10,"column":8,"nodeType":"772","messageId":"773","endLine":10,"endColumn":17},{"ruleId":"770","severity":1,"message":"787","line":13,"column":10,"nodeType":"772","messageId":"773","endLine":13,"endColumn":22},{"ruleId":"770","severity":1,"message":"788","line":13,"column":24,"nodeType":"772","messageId":"773","endLine":13,"endColumn":30},{"ruleId":"770","severity":1,"message":"789","line":15,"column":10,"nodeType":"772","messageId":"773","endLine":15,"endColumn":21},{"ruleId":"770","severity":1,"message":"790","line":19,"column":10,"nodeType":"772","messageId":"773","endLine":19,"endColumn":17},{"ruleId":"770","severity":1,"message":"791","line":22,"column":11,"nodeType":"772","messageId":"773","endLine":22,"endColumn":23},{"ruleId":"770","severity":1,"message":"792","line":27,"column":11,"nodeType":"772","messageId":"773","endLine":27,"endColumn":17},{"ruleId":"764","severity":1,"message":"793","line":51,"column":8,"nodeType":"766","endLine":51,"endColumn":42,"suggestions":"794"},{"ruleId":"776","replacedBy":"795"},{"ruleId":"778","replacedBy":"796"},{"ruleId":"770","severity":1,"message":"797","line":5,"column":42,"nodeType":"772","messageId":"773","endLine":5,"endColumn":64},{"ruleId":"770","severity":1,"message":"798","line":5,"column":66,"nodeType":"772","messageId":"773","endLine":5,"endColumn":89},{"ruleId":"770","severity":1,"message":"799","line":5,"column":109,"nodeType":"772","messageId":"773","endLine":5,"endColumn":126},{"ruleId":"770","severity":1,"message":"800","line":10,"column":8,"nodeType":"772","messageId":"773","endLine":10,"endColumn":23},{"ruleId":"770","severity":1,"message":"801","line":13,"column":8,"nodeType":"772","messageId":"773","endLine":13,"endColumn":17},{"ruleId":"770","severity":1,"message":"802","line":15,"column":10,"nodeType":"772","messageId":"773","endLine":15,"endColumn":20},{"ruleId":"803","severity":1,"message":"804","line":98,"column":25,"nodeType":"805","endLine":98,"endColumn":28},{"ruleId":"803","severity":1,"message":"804","line":108,"column":25,"nodeType":"805","endLine":108,"endColumn":45},{"ruleId":"803","severity":1,"message":"804","line":117,"column":25,"nodeType":"805","endLine":117,"endColumn":28},{"ruleId":"770","severity":1,"message":"806","line":1,"column":22,"nodeType":"772","messageId":"773","endLine":1,"endColumn":26},{"ruleId":"770","severity":1,"message":"807","line":2,"column":7,"nodeType":"772","messageId":"773","endLine":2,"endColumn":18},{"ruleId":"770","severity":1,"message":"792","line":20,"column":11,"nodeType":"772","messageId":"773","endLine":20,"endColumn":17},{"ruleId":"770","severity":1,"message":"808","line":43,"column":15,"nodeType":"772","messageId":"773","endLine":43,"endColumn":20},{"ruleId":"770","severity":1,"message":"809","line":48,"column":11,"nodeType":"772","messageId":"773","endLine":48,"endColumn":27},{"ruleId":"776","replacedBy":"810"},{"ruleId":"778","replacedBy":"811"},{"ruleId":"770","severity":1,"message":"812","line":3,"column":8,"nodeType":"772","messageId":"773","endLine":3,"endColumn":20},{"ruleId":"770","severity":1,"message":"813","line":1,"column":17,"nodeType":"772","messageId":"773","endLine":1,"endColumn":26},{"ruleId":"770","severity":1,"message":"814","line":18,"column":8,"nodeType":"772","messageId":"773","endLine":18,"endColumn":22},{"ruleId":"770","severity":1,"message":"815","line":36,"column":11,"nodeType":"772","messageId":"773","endLine":36,"endColumn":19},{"ruleId":"776","replacedBy":"816"},{"ruleId":"778","replacedBy":"817"},{"ruleId":"770","severity":1,"message":"818","line":2,"column":8,"nodeType":"772","messageId":"773","endLine":2,"endColumn":13},{"ruleId":"770","severity":1,"message":"819","line":7,"column":8,"nodeType":"772","messageId":"773","endLine":7,"endColumn":23},{"ruleId":"770","severity":1,"message":"820","line":8,"column":8,"nodeType":"772","messageId":"773","endLine":8,"endColumn":12},{"ruleId":"770","severity":1,"message":"821","line":11,"column":8,"nodeType":"772","messageId":"773","endLine":11,"endColumn":16},{"ruleId":"770","severity":1,"message":"822","line":12,"column":8,"nodeType":"772","messageId":"773","endLine":12,"endColumn":17},{"ruleId":"770","severity":1,"message":"823","line":13,"column":8,"nodeType":"772","messageId":"773","endLine":13,"endColumn":25},{"ruleId":"770","severity":1,"message":"824","line":1,"column":10,"nodeType":"772","messageId":"773","endLine":1,"endColumn":16},{"ruleId":"770","severity":1,"message":"825","line":3,"column":29,"nodeType":"772","messageId":"773","endLine":3,"endColumn":47},{"ruleId":"770","severity":1,"message":"826","line":4,"column":23,"nodeType":"772","messageId":"773","endLine":4,"endColumn":34},{"ruleId":"770","severity":1,"message":"827","line":7,"column":10,"nodeType":"772","messageId":"773","endLine":7,"endColumn":19},{"ruleId":"770","severity":1,"message":"828","line":9,"column":10,"nodeType":"772","messageId":"773","endLine":9,"endColumn":20},{"ruleId":"770","severity":1,"message":"829","line":18,"column":24,"nodeType":"772","messageId":"773","endLine":18,"endColumn":37},{"ruleId":"770","severity":1,"message":"830","line":1,"column":10,"nodeType":"772","messageId":"773","endLine":1,"endColumn":23},{"ruleId":"770","severity":1,"message":"771","line":1,"column":49,"nodeType":"772","messageId":"773","endLine":1,"endColumn":64},{"ruleId":"770","severity":1,"message":"774","line":5,"column":5,"nodeType":"772","messageId":"773","endLine":5,"endColumn":21},{"ruleId":"770","severity":1,"message":"831","line":5,"column":8,"nodeType":"772","messageId":"773","endLine":5,"endColumn":25},{"ruleId":"764","severity":1,"message":"832","line":28,"column":8,"nodeType":"766","endLine":28,"endColumn":33,"suggestions":"833"},{"ruleId":"770","severity":1,"message":"834","line":1,"column":8,"nodeType":"772","messageId":"773","endLine":1,"endColumn":13},{"ruleId":"770","severity":1,"message":"835","line":2,"column":22,"nodeType":"772","messageId":"773","endLine":2,"endColumn":32},{"ruleId":"770","severity":1,"message":"836","line":2,"column":34,"nodeType":"772","messageId":"773","endLine":2,"endColumn":39},{"ruleId":"770","severity":1,"message":"837","line":2,"column":41,"nodeType":"772","messageId":"773","endLine":2,"endColumn":53},{"ruleId":"770","severity":1,"message":"838","line":46,"column":12,"nodeType":"772","messageId":"773","endLine":46,"endColumn":16},{"ruleId":"764","severity":1,"message":"839","line":53,"column":5,"nodeType":"772","endLine":53,"endColumn":14,"suggestions":"840"},{"ruleId":"764","severity":1,"message":"841","line":86,"column":36,"nodeType":"772","endLine":86,"endColumn":47},{"ruleId":"770","severity":1,"message":"842","line":101,"column":19,"nodeType":"772","messageId":"773","endLine":101,"endColumn":23},{"ruleId":"770","severity":1,"message":"843","line":15,"column":28,"nodeType":"772","messageId":"773","endLine":15,"endColumn":42},{"ruleId":"770","severity":1,"message":"844","line":27,"column":11,"nodeType":"772","messageId":"773","endLine":27,"endColumn":18},{"ruleId":"770","severity":1,"message":"806","line":1,"column":36,"nodeType":"772","messageId":"773","endLine":1,"endColumn":40},{"ruleId":"770","severity":1,"message":"845","line":3,"column":7,"nodeType":"772","messageId":"773","endLine":3,"endColumn":17},{"ruleId":"770","severity":1,"message":"846","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":32},{"ruleId":"770","severity":1,"message":"847","line":43,"column":20,"nodeType":"772","messageId":"773","endLine":43,"endColumn":41},{"ruleId":"770","severity":1,"message":"848","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":25},{"ruleId":"776","replacedBy":"849"},{"ruleId":"778","replacedBy":"850"},{"ruleId":"770","severity":1,"message":"828","line":12,"column":10,"nodeType":"772","messageId":"773","endLine":12,"endColumn":20},{"ruleId":"770","severity":1,"message":"808","line":39,"column":15,"nodeType":"772","messageId":"773","endLine":39,"endColumn":20},{"ruleId":"770","severity":1,"message":"809","line":44,"column":11,"nodeType":"772","messageId":"773","endLine":44,"endColumn":27},{"ruleId":"776","replacedBy":"851"},{"ruleId":"778","replacedBy":"852"},{"ruleId":"770","severity":1,"message":"847","line":26,"column":20,"nodeType":"772","messageId":"773","endLine":26,"endColumn":41},{"ruleId":"770","severity":1,"message":"786","line":2,"column":8,"nodeType":"772","messageId":"773","endLine":2,"endColumn":17},{"ruleId":"770","severity":1,"message":"831","line":6,"column":8,"nodeType":"772","messageId":"773","endLine":6,"endColumn":25},{"ruleId":"770","severity":1,"message":"798","line":14,"column":29,"nodeType":"772","messageId":"773","endLine":14,"endColumn":52},{"ruleId":"770","severity":1,"message":"853","line":20,"column":7,"nodeType":"772","messageId":"773","endLine":20,"endColumn":20},{"ruleId":"770","severity":1,"message":"854","line":45,"column":11,"nodeType":"772","messageId":"773","endLine":45,"endColumn":22},{"ruleId":"764","severity":1,"message":"855","line":66,"column":8,"nodeType":"766","endLine":66,"endColumn":10,"suggestions":"856"},{"ruleId":"770","severity":1,"message":"857","line":125,"column":15,"nodeType":"772","messageId":"773","endLine":125,"endColumn":31},{"ruleId":"858","severity":1,"message":"859","line":295,"column":17,"nodeType":"860","messageId":"861","endLine":295,"endColumn":23},{"ruleId":"770","severity":1,"message":"862","line":2,"column":25,"nodeType":"772","messageId":"773","endLine":2,"endColumn":33},{"ruleId":"770","severity":1,"message":"863","line":27,"column":10,"nodeType":"772","messageId":"773","endLine":27,"endColumn":19},{"ruleId":"764","severity":1,"message":"864","line":64,"column":6,"nodeType":"766","endLine":64,"endColumn":8,"suggestions":"865"},{"ruleId":"770","severity":1,"message":"837","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":22},{"ruleId":"770","severity":1,"message":"835","line":2,"column":24,"nodeType":"772","messageId":"773","endLine":2,"endColumn":34},{"ruleId":"770","severity":1,"message":"836","line":2,"column":36,"nodeType":"772","messageId":"773","endLine":2,"endColumn":41},{"ruleId":"770","severity":1,"message":"866","line":6,"column":8,"nodeType":"772","messageId":"773","endLine":6,"endColumn":28},{"ruleId":"776","replacedBy":"867"},{"ruleId":"778","replacedBy":"868"},{"ruleId":"770","severity":1,"message":"869","line":31,"column":6,"nodeType":"772","messageId":"773","endLine":31,"endColumn":26},{"ruleId":"770","severity":1,"message":"870","line":37,"column":11,"nodeType":"772","messageId":"773","endLine":37,"endColumn":25},{"ruleId":"764","severity":1,"message":"855","line":35,"column":8,"nodeType":"766","endLine":35,"endColumn":18,"suggestions":"871"},{"ruleId":"770","severity":1,"message":"872","line":18,"column":3,"nodeType":"772","messageId":"773","endLine":18,"endColumn":24},{"ruleId":"770","severity":1,"message":"873","line":18,"column":26,"nodeType":"772","messageId":"773","endLine":18,"endColumn":47},{"ruleId":"770","severity":1,"message":"874","line":18,"column":49,"nodeType":"772","messageId":"773","endLine":18,"endColumn":70},{"ruleId":"770","severity":1,"message":"875","line":6,"column":17,"nodeType":"772","messageId":"773","endLine":6,"endColumn":35},{"ruleId":"770","severity":1,"message":"876","line":6,"column":37,"nodeType":"772","messageId":"773","endLine":6,"endColumn":50},{"ruleId":"770","severity":1,"message":"784","line":1,"column":17,"nodeType":"772","messageId":"773","endLine":1,"endColumn":25},{"ruleId":"770","severity":1,"message":"828","line":6,"column":10,"nodeType":"772","messageId":"773","endLine":6,"endColumn":20},{"ruleId":"764","severity":1,"message":"793","line":30,"column":8,"nodeType":"766","endLine":30,"endColumn":33,"suggestions":"877"},{"ruleId":"770","severity":1,"message":"878","line":3,"column":113,"nodeType":"772","messageId":"773","endLine":3,"endColumn":129},{"ruleId":"770","severity":1,"message":"879","line":5,"column":10,"nodeType":"772","messageId":"773","endLine":5,"endColumn":23},{"ruleId":"764","severity":1,"message":"880","line":52,"column":8,"nodeType":"766","endLine":52,"endColumn":30,"suggestions":"881"},{"ruleId":"764","severity":1,"message":"841","line":73,"column":36,"nodeType":"772","endLine":73,"endColumn":47},{"ruleId":"764","severity":1,"message":"882","line":50,"column":8,"nodeType":"766","endLine":50,"endColumn":10,"suggestions":"883"},{"ruleId":"764","severity":1,"message":"884","line":55,"column":8,"nodeType":"766","endLine":55,"endColumn":44,"suggestions":"885"},{"ruleId":"764","severity":1,"message":"886","line":59,"column":8,"nodeType":"766","endLine":59,"endColumn":15,"suggestions":"887"},{"ruleId":"764","severity":1,"message":"841","line":61,"column":36,"nodeType":"772","endLine":61,"endColumn":47},{"ruleId":"770","severity":1,"message":"888","line":7,"column":10,"nodeType":"772","messageId":"773","endLine":7,"endColumn":20},{"ruleId":"770","severity":1,"message":"820","line":10,"column":8,"nodeType":"772","messageId":"773","endLine":10,"endColumn":12},{"ruleId":"770","severity":1,"message":"889","line":21,"column":19,"nodeType":"772","messageId":"773","endLine":21,"endColumn":27},{"ruleId":"770","severity":1,"message":"890","line":27,"column":11,"nodeType":"772","messageId":"773","endLine":27,"endColumn":24},{"ruleId":"770","severity":1,"message":"891","line":30,"column":11,"nodeType":"772","messageId":"773","endLine":30,"endColumn":31},{"ruleId":"770","severity":1,"message":"892","line":32,"column":11,"nodeType":"772","messageId":"773","endLine":32,"endColumn":31},{"ruleId":"770","severity":1,"message":"893","line":34,"column":11,"nodeType":"772","messageId":"773","endLine":34,"endColumn":18},{"ruleId":"770","severity":1,"message":"894","line":36,"column":13,"nodeType":"772","messageId":"773","endLine":36,"endColumn":14},{"ruleId":"770","severity":1,"message":"895","line":68,"column":15,"nodeType":"772","messageId":"773","endLine":68,"endColumn":20},{"ruleId":"770","severity":1,"message":"785","line":9,"column":8,"nodeType":"772","messageId":"773","endLine":9,"endColumn":19},{"ruleId":"776","replacedBy":"896"},{"ruleId":"778","replacedBy":"897"},{"ruleId":"776","replacedBy":"898"},{"ruleId":"778","replacedBy":"899"},{"ruleId":"770","severity":1,"message":"900","line":3,"column":8,"nodeType":"772","messageId":"773","endLine":3,"endColumn":18},{"ruleId":"770","severity":1,"message":"901","line":1,"column":57,"nodeType":"772","messageId":"773","endLine":1,"endColumn":66},{"ruleId":"770","severity":1,"message":"824","line":1,"column":68,"nodeType":"772","messageId":"773","endLine":1,"endColumn":74},{"ruleId":"770","severity":1,"message":"902","line":1,"column":76,"nodeType":"772","messageId":"773","endLine":1,"endColumn":83},{"ruleId":"770","severity":1,"message":"903","line":1,"column":85,"nodeType":"772","messageId":"773","endLine":1,"endColumn":92},{"ruleId":"770","severity":1,"message":"802","line":3,"column":10,"nodeType":"772","messageId":"773","endLine":3,"endColumn":20},{"ruleId":"776","replacedBy":"904"},{"ruleId":"778","replacedBy":"905"},{"ruleId":"770","severity":1,"message":"831","line":6,"column":8,"nodeType":"772","messageId":"773","endLine":6,"endColumn":25},{"ruleId":"770","severity":1,"message":"906","line":16,"column":10,"nodeType":"772","messageId":"773","endLine":16,"endColumn":21},{"ruleId":"770","severity":1,"message":"907","line":18,"column":8,"nodeType":"772","messageId":"773","endLine":18,"endColumn":13},{"ruleId":"764","severity":1,"message":"908","line":53,"column":6,"nodeType":"766","endLine":53,"endColumn":31,"suggestions":"909"},{"ruleId":"770","severity":1,"message":"910","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":27},{"ruleId":"770","severity":1,"message":"911","line":67,"column":13,"nodeType":"772","messageId":"773","endLine":67,"endColumn":15},{"ruleId":"770","severity":1,"message":"912","line":5,"column":28,"nodeType":"772","messageId":"773","endLine":5,"endColumn":32},{"ruleId":"770","severity":1,"message":"828","line":13,"column":10,"nodeType":"772","messageId":"773","endLine":13,"endColumn":20},{"ruleId":"764","severity":1,"message":"913","line":40,"column":8,"nodeType":"766","endLine":40,"endColumn":41,"suggestions":"914"},{"ruleId":"770","severity":1,"message":"915","line":3,"column":38,"nodeType":"772","messageId":"773","endLine":3,"endColumn":47},{"ruleId":"770","severity":1,"message":"894","line":23,"column":13,"nodeType":"772","messageId":"773","endLine":23,"endColumn":14},{"ruleId":"764","severity":1,"message":"916","line":43,"column":27,"nodeType":"772","endLine":43,"endColumn":34},{"ruleId":"764","severity":1,"message":"917","line":45,"column":8,"nodeType":"766","endLine":45,"endColumn":10,"suggestions":"918"},{"ruleId":"764","severity":1,"message":"919","line":73,"column":8,"nodeType":"766","endLine":73,"endColumn":24,"suggestions":"920"},{"ruleId":"764","severity":1,"message":"921","line":73,"column":9,"nodeType":"922","endLine":73,"endColumn":23},{"ruleId":"770","severity":1,"message":"894","line":41,"column":13,"nodeType":"772","messageId":"773","endLine":41,"endColumn":14},{"ruleId":"764","severity":1,"message":"923","line":81,"column":8,"nodeType":"766","endLine":81,"endColumn":24,"suggestions":"924"},{"ruleId":"770","severity":1,"message":"894","line":18,"column":13,"nodeType":"772","messageId":"773","endLine":18,"endColumn":14},{"ruleId":"770","severity":1,"message":"925","line":2,"column":8,"nodeType":"772","messageId":"773","endLine":2,"endColumn":16},{"ruleId":"770","severity":1,"message":"813","line":1,"column":17,"nodeType":"772","messageId":"773","endLine":1,"endColumn":26},{"ruleId":"770","severity":1,"message":"789","line":4,"column":10,"nodeType":"772","messageId":"773","endLine":4,"endColumn":21},{"ruleId":"770","severity":1,"message":"926","line":15,"column":11,"nodeType":"772","messageId":"773","endLine":15,"endColumn":19},{"ruleId":"770","severity":1,"message":"771","line":1,"column":49,"nodeType":"772","messageId":"773","endLine":1,"endColumn":64},{"ruleId":"770","severity":1,"message":"927","line":5,"column":10,"nodeType":"772","messageId":"773","endLine":5,"endColumn":31},{"ruleId":"770","severity":1,"message":"774","line":28,"column":5,"nodeType":"772","messageId":"773","endLine":28,"endColumn":21},{"ruleId":"770","severity":1,"message":"910","line":31,"column":10,"nodeType":"772","messageId":"773","endLine":31,"endColumn":27},{"ruleId":"770","severity":1,"message":"928","line":31,"column":29,"nodeType":"772","messageId":"773","endLine":31,"endColumn":48},{"ruleId":"770","severity":1,"message":"929","line":35,"column":10,"nodeType":"772","messageId":"773","endLine":35,"endColumn":16},{"ruleId":"770","severity":1,"message":"930","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":22},{"ruleId":"770","severity":1,"message":"853","line":22,"column":7,"nodeType":"772","messageId":"773","endLine":22,"endColumn":20},{"ruleId":"764","severity":1,"message":"931","line":64,"column":8,"nodeType":"766","endLine":64,"endColumn":10,"suggestions":"932"},{"ruleId":"933","severity":1,"message":"934","line":27,"column":90,"nodeType":"805","endLine":27,"endColumn":149},{"ruleId":"770","severity":1,"message":"935","line":27,"column":11,"nodeType":"772","messageId":"773","endLine":27,"endColumn":16},{"ruleId":"770","severity":1,"message":"936","line":28,"column":11,"nodeType":"772","messageId":"773","endLine":28,"endColumn":21},{"ruleId":"770","severity":1,"message":"890","line":29,"column":11,"nodeType":"772","messageId":"773","endLine":29,"endColumn":24},{"ruleId":"770","severity":1,"message":"937","line":79,"column":19,"nodeType":"772","messageId":"773","endLine":79,"endColumn":23},{"ruleId":"770","severity":1,"message":"813","line":1,"column":17,"nodeType":"772","messageId":"773","endLine":1,"endColumn":26},{"ruleId":"770","severity":1,"message":"784","line":1,"column":28,"nodeType":"772","messageId":"773","endLine":1,"endColumn":36},{"ruleId":"770","severity":1,"message":"798","line":3,"column":34,"nodeType":"772","messageId":"773","endLine":3,"endColumn":57},{"ruleId":"770","severity":1,"message":"878","line":3,"column":59,"nodeType":"772","messageId":"773","endLine":3,"endColumn":75},{"ruleId":"770","severity":1,"message":"938","line":4,"column":10,"nodeType":"772","messageId":"773","endLine":4,"endColumn":25},{"ruleId":"770","severity":1,"message":"939","line":4,"column":27,"nodeType":"772","messageId":"773","endLine":4,"endColumn":36},{"ruleId":"770","severity":1,"message":"940","line":28,"column":11,"nodeType":"772","messageId":"773","endLine":28,"endColumn":25},{"ruleId":"764","severity":1,"message":"941","line":53,"column":8,"nodeType":"766","endLine":53,"endColumn":52,"suggestions":"942"},{"ruleId":"764","severity":1,"message":"921","line":53,"column":9,"nodeType":"943","endLine":53,"endColumn":51},{"ruleId":"944","severity":1,"message":"945","line":126,"column":55,"nodeType":"946","messageId":"947","endLine":126,"endColumn":182,"fix":"948"},{"ruleId":"944","severity":1,"message":"945","line":132,"column":55,"nodeType":"946","messageId":"947","endLine":132,"endColumn":182,"fix":"949"},{"ruleId":"770","severity":1,"message":"940","line":18,"column":11,"nodeType":"772","messageId":"773","endLine":18,"endColumn":25},{"ruleId":"770","severity":1,"message":"950","line":2,"column":55,"nodeType":"772","messageId":"773","endLine":2,"endColumn":72},{"ruleId":"770","severity":1,"message":"951","line":3,"column":17,"nodeType":"772","messageId":"773","endLine":3,"endColumn":26},{"ruleId":"770","severity":1,"message":"952","line":1,"column":38,"nodeType":"772","messageId":"773","endLine":1,"endColumn":40},{"ruleId":"770","severity":1,"message":"785","line":3,"column":8,"nodeType":"772","messageId":"773","endLine":3,"endColumn":19},{"ruleId":"770","severity":1,"message":"844","line":43,"column":11,"nodeType":"772","messageId":"773","endLine":43,"endColumn":18},{"ruleId":"770","severity":1,"message":"915","line":4,"column":38,"nodeType":"772","messageId":"773","endLine":4,"endColumn":47},{"ruleId":"770","severity":1,"message":"894","line":18,"column":13,"nodeType":"772","messageId":"773","endLine":18,"endColumn":14},{"ruleId":"770","severity":1,"message":"910","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":27},{"ruleId":"770","severity":1,"message":"953","line":2,"column":29,"nodeType":"772","messageId":"773","endLine":2,"endColumn":50},{"ruleId":"770","severity":1,"message":"954","line":2,"column":52,"nodeType":"772","messageId":"773","endLine":2,"endColumn":68},{"ruleId":"770","severity":1,"message":"955","line":2,"column":70,"nodeType":"772","messageId":"773","endLine":2,"endColumn":94},{"ruleId":"770","severity":1,"message":"956","line":2,"column":96,"nodeType":"772","messageId":"773","endLine":2,"endColumn":115},{"ruleId":"770","severity":1,"message":"957","line":2,"column":117,"nodeType":"772","messageId":"773","endLine":2,"endColumn":134},{"ruleId":"770","severity":1,"message":"958","line":4,"column":10,"nodeType":"772","messageId":"773","endLine":4,"endColumn":22},{"ruleId":"770","severity":1,"message":"927","line":5,"column":10,"nodeType":"772","messageId":"773","endLine":5,"endColumn":31},{"ruleId":"770","severity":1,"message":"910","line":2,"column":10,"nodeType":"772","messageId":"773","endLine":2,"endColumn":27},{"ruleId":"770","severity":1,"message":"953","line":2,"column":29,"nodeType":"772","messageId":"773","endLine":2,"endColumn":50},{"ruleId":"770","severity":1,"message":"954","line":2,"column":52,"nodeType":"772","messageId":"773","endLine":2,"endColumn":68},{"ruleId":"770","severity":1,"message":"955","line":2,"column":70,"nodeType":"772","messageId":"773","endLine":2,"endColumn":94},{"ruleId":"770","severity":1,"message":"956","line":2,"column":96,"nodeType":"772","messageId":"773","endLine":2,"endColumn":115},{"ruleId":"770","severity":1,"message":"957","line":2,"column":117,"nodeType":"772","messageId":"773","endLine":2,"endColumn":134},{"ruleId":"770","severity":1,"message":"958","line":4,"column":10,"nodeType":"772","messageId":"773","endLine":4,"endColumn":22},{"ruleId":"770","severity":1,"message":"927","line":5,"column":10,"nodeType":"772","messageId":"773","endLine":5,"endColumn":31},{"ruleId":"770","severity":1,"message":"818","line":2,"column":8,"nodeType":"772","messageId":"773","endLine":2,"endColumn":13},{"ruleId":"770","severity":1,"message":"820","line":7,"column":8,"nodeType":"772","messageId":"773","endLine":7,"endColumn":12},{"ruleId":"770","severity":1,"message":"821","line":11,"column":8,"nodeType":"772","messageId":"773","endLine":11,"endColumn":16},{"ruleId":"770","severity":1,"message":"822","line":13,"column":8,"nodeType":"772","messageId":"773","endLine":13,"endColumn":17},{"ruleId":"770","severity":1,"message":"823","line":14,"column":8,"nodeType":"772","messageId":"773","endLine":14,"endColumn":25},{"ruleId":"770","severity":1,"message":"784","line":1,"column":31,"nodeType":"772","messageId":"773","endLine":1,"endColumn":39},{"ruleId":"770","severity":1,"message":"786","line":2,"column":8,"nodeType":"772","messageId":"773","endLine":2,"endColumn":17},{"ruleId":"770","severity":1,"message":"831","line":6,"column":8,"nodeType":"772","messageId":"773","endLine":6,"endColumn":25},{"ruleId":"770","severity":1,"message":"959","line":9,"column":8,"nodeType":"772","messageId":"773","endLine":9,"endColumn":28},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'byePlayerNumber', 'insertByePlayers', and 'numberOfPlayers'. Either include them or remove the dependency array.","ArrayExpression",["960"],"React Hook useEffect has a missing dependency: 'entityState.eliminationGames'. Either include it or remove the dependency array.",["961"],"@typescript-eslint/no-unused-vars","'PayloadedAction' is defined but never used.","Identifier","unusedVar","'UserActionParams' is defined but never used.","'BaseDatabaseEntity' is defined but never used.","no-native-reassign",["962"],"no-negated-in-lhs",["963"],["962"],["963"],["962"],["963"],"'useState' is defined but never used.","'CssBaseline' is defined but never used.","'TextField' is defined but never used.","'ErrorMessage' is defined but never used.","'Formik' is defined but never used.","'authActions' is defined but never used.","'appName' is defined but never used.","'FormikValues' is defined but never used.","'IError' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'token'. Either include them or remove the dependency array.",["964"],["962"],["963"],"'StateEliminationPlayer' is defined but never used.","'StateEliminationPlayers' is defined but never used.","'StateParticipants' is defined but never used.","'CheckCircleIcon' is defined but never used.","'ErrorIcon' is defined but never used.","'ErrorNames' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'fade' is defined but never used.","'drawerWidth' is assigned a value but never used.","'timer' is assigned a value but never used.","'handleFormSubmit' is assigned a value but never used.",["962"],["963"],"'FacebookIcon' is defined but never used.","'useEffect' is defined but never used.","'FormHelperText' is defined but never used.","'loggedIn' is assigned a value but never used.",["962"],["963"],"'Paper' is defined but never used.","'EliminationForm' is defined but never used.","'clsx' is defined but never used.","'Whatshot' is defined but never used.","'StarsIcon' is defined but never used.","'CompareArrowsIcon' is defined but never used.","'Action' is defined but never used.","'FetchedTournaments' is defined but never used.","'useSelector' is defined but never used.","'RootState' is defined but never used.","'useHistory' is defined but never used.","'setSubmitting' is assigned a value but never used.","'actionCreator' is defined but never used.","'DialogContentText' is defined but never used.","React Hook useEffect has a missing dependency: 'userState.delete.error'. Either include it or remove the dependency array.",["965"],"'React' is defined but never used.","'makeStyles' is defined but never used.","'Theme' is defined but never used.","'createStyles' is defined but never used.","'path' is assigned a value but never used.","React Hook useEffect contains a call to 'setPath'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [history.location.pathname] as a second argument to the useEffect Hook.",["966"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","'Icon' is assigned a value but never used.","'RoundRobinIcon' is defined but never used.","'history' is assigned a value but never used.","'loginCheck' is assigned a value but never used.","'UserGoogleLoginReqData' is defined but never used.","'DispatchWithoutAction' is defined but never used.","'EntityStateData' is defined but never used.",["962"],["963"],["962"],["963"],"'initialPlayer' is assigned a value but never used.","'mainClasses' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["967"],"'participantNames' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Redirect' is defined but never used.","'HttpError' is defined but never used.","React Hook useEffect has missing dependencies: 'authState.status' and 'dispatch'. Either include them or remove the dependency array.",["968"],"'languageSelectStyles' is defined but never used.",["962"],["963"],"'SubheaderStateValues' is defined but never used.","'SubheaderState' is defined but never used.",["969"],"'CREATE_PLAYER_REQUEST' is defined but never used.","'CREATE_PLAYER_SUCCESS' is defined but never used.","'CREATE_PLAYER_FAILURE' is defined but never used.","'AxiosRequestConfig' is defined but never used.","'AxiosResponse' is defined but never used.",["970"],"'StateParticipant' is defined but never used.","'UserStateData' is defined but never used.","React Hook useEffect has missing dependencies: 'formValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["971"],"React Hook useEffect has a missing dependency: 'submitInitialGamesToStore'. Either include it or remove the dependency array.",["972"],"React Hook useEffect has a missing dependency: 'getPlayersDataWithStats'. Either include it or remove the dependency array.",["973"],"React Hook useEffect has a missing dependency: 'delayedUpdateMaxScores'. Either include it or remove the dependency array.",["974"],"'resetGames' is defined but never used.","'setGames' is assigned a value but never used.","'settingsState' is assigned a value but never used.","'scoreToggleButtonRef' is assigned a value but never used.","'firstRoundGameNumber' is assigned a value but never used.","'columns' is assigned a value but never used.","'t' is assigned a value but never used.","'round' is assigned a value but never used.",["962"],["963"],["962"],["963"],"'IconButton' is defined but never used.","'AnyAction' is defined but never used.","'Reducer' is defined but never used.","'compose' is defined but never used.",["962"],["963"],"'useSnackbar' is defined but never used.","'toast' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'userState.delete.status'. Either include them or remove the dependency array.",["975"],"'UserDeleteReqData' is defined but never used.","'id' is assigned a value but never used.","'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["976"],"'Draggable' is defined but never used.","The ref value 'forwardedRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'forwardedRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'forwardedRef', 'handleKeyDown', and 'sets'. Either include them or remove the dependency array.",["977"],"React Hook useEffect has missing dependencies: 'gameKey', 'games', and 'numberOfGames'. Either include them or remove the dependency array.",["978"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'lastVisibleScore', 'numberOfGoals', and 'visibleScores'. Either include them or remove the dependency array. If 'setInitiallyLastVisibleScore' needs the current value of 'visibleScores', you can also switch to useReducer instead of useState and read 'visibleScores' in the reducer.",["979"],"'AppState' is defined but never used.","'dispatch' is assigned a value but never used.","'ForgotPasswordReqData' is defined but never used.","'UserRegisterResData' is defined but never used.","'logout' is defined but never used.","'ActionStatus' is defined but never used.","React Hook useEffect has a missing dependency: 'getInitialTeams'. Either include it or remove the dependency array.",["980"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'games' is assigned a value but never used.","'lmsPlayers' is assigned a value but never used.","'name' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'fetchedPlayers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'gamesState' and 'props.gameKey'. Either include them or remove the dependency array. If 'setGame' needs the current value of 'props.gameKey', you can also switch to useReducer instead of useState and read 'props.gameKey' in the reducer.",["981"],"LogicalExpression","no-useless-computed-key","Unnecessarily computed property ['thirdPlace'] found.","Property","unnecessarilyComputedProperty",{"range":"982","text":"983"},{"range":"984","text":"983"},"'WithSnackbarProps' is defined but never used.","'Component' is defined but never used.","'FC' is defined but never used.","'UserLoginCheckReqData' is defined but never used.","'UserLoginReqData' is defined but never used.","'UserPasswordResetReqData' is defined but never used.","'UserRegisterReqData' is defined but never used.","'UserUpdateReqData' is defined but never used.","'asyncWrapper' is defined but never used.","'PlayCircleFilledIcon' is defined but never used.",{"desc":"985","fix":"986"},{"desc":"987","fix":"988"},"no-global-assign","no-unsafe-negation",{"desc":"989","fix":"990"},{"desc":"991","fix":"992"},{"desc":"993","fix":"994"},{"desc":"995","fix":"996"},{"desc":"997","fix":"998"},{"desc":"999","fix":"1000"},{"desc":"1001","fix":"1002"},{"desc":"1003","fix":"1004"},{"desc":"1005","fix":"1006"},{"desc":"1007","fix":"1008"},{"desc":"1009","fix":"1010"},{"desc":"1011","fix":"1012"},{"desc":"1013","fix":"1014"},{"desc":"1015","fix":"1016"},{"desc":"1017","fix":"1018"},{"desc":"1019","fix":"1020"},{"desc":"1021","fix":"1022"},{"desc":"1023","fix":"1024"},[6757,6771],"'thirdPlace'",[7221,7235],"Update the dependencies array to be: [byePlayerNumber, entityState.eliminationPlayers, insertByePlayers, numberOfPlayers]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [entityState.eliminationGames]",{"range":"1027","text":"1028"},"Update the dependencies array to be: [dispatch, registerState.verifyEmail.status, token]",{"range":"1029","text":"1030"},"Update the dependencies array to be: [userState.delete.error, userState.delete.status]",{"range":"1031","text":"1032"},"Add dependencies array: [history.location.pathname]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [dispatch]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [authState.status, dispatch]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [dispatch, loggedIn]",{"range":"1039","text":"1040"},"Update the dependencies array to be: [dispatch, token, userState.delete.status]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [formValues, props, registerState.status]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [submitInitialGamesToStore]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [storeGames, entityState.tournament, getPlayersDataWithStats]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [delayedUpdateMaxScores, width]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [history, userState.delete.status, userState.update.status]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [authState.forgotPassword.status, props]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [forwardedRef, handleKeyDown, sets]",{"range":"1055","text":"1056"},"Update the dependencies array to be: [gameKey, games, numberOfGames]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [lastVisibleScore, numberOfGoals, selectedNumber, visibleScores]",{"range":"1059","text":"1060"},"Update the dependencies array to be: [getInitialTeams]",{"range":"1061","text":"1062"},"Update the dependencies array to be: [gamesState, props.gameKey]",{"range":"1063","text":"1064"},[2200,2232],"[byePlayerNumber, entityState.eliminationPlayers, insertByePlayers, numberOfPlayers]",[1196,1198],"[entityState.eliminationGames]",[1909,1943],"[dispatch, registerState.verifyEmail.status, token]",[1122,1147],"[userState.delete.error, userState.delete.status]",[2425,2425],", [history.location.pathname]",[3154,3156],"[dispatch]",[2615,2617],"[authState.status, dispatch]",[1758,1768],"[dispatch, loggedIn]",[1340,1365],"[dispatch, token, userState.delete.status]",[2294,2316],"[formValues, props, registerState.status]",[2205,2207],"[submitInitialGamesToStore]",[2333,2369],"[storeGames, entityState.tournament, getPlayersDataWithStats]",[2453,2460],"[delayedUpdateMaxScores, width]",[2068,2093],"[history, userState.delete.status, userState.update.status]",[1477,1510],"[authState.forgotPassword.status, props]",[2067,2069],"[forwardedRef, handleKeyDown, sets]",[3106,3122],"[gameKey, games, numberOfGames]",[3255,3271],"[lastVisibleScore, numberOfGoals, selectedNumber, visibleScores]",[2740,2742],"[getInitialTeams]",[2717,2761],"[gamesState, props.gameKey]"]